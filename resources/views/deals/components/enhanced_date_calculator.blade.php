<!-- –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å Flatpickr -->
<script>
    /**
     * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Flatpickr
     */
    class EnhancedProjectDateCalculator {
        constructor() {
            this.startDateField = null;
            this.durationField = null;
            this.endDateField = null;
            this.initialized = false;
            this.holidays = [
                // –†–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ 2025
                '2025-01-01', '2025-01-02', '2025-01-03', '2025-01-04', '2025-01-05',
                '2025-01-06', '2025-01-07', '2025-01-08', '2025-02-23', '2025-03-08',
                '2025-05-01', '2025-05-09', '2025-06-12', '2025-11-04'
            ];
        }

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
         */
        init() {
            this.findFields();
            if (this.areFieldsValid()) {
                this.loadFlatpickr().then(() => {
                    this.setupDatePickers();
                    this.setupEventListeners();
                    this.calculateInitialDates();
                    this.initialized = true;
                    console.log('üìÖ [EnhancedDateCalculator] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                });
            } else {
                console.warn('‚ö†Ô∏è [EnhancedDateCalculator] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è');
            }
        }

        /**
         * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Flatpickr
         */
        async loadFlatpickr() {
            if (typeof flatpickr !== 'undefined') {
                return Promise.resolve();
            }

            return new Promise((resolve, reject) => {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º CSS
                const css = document.createElement('link');
                css.rel = 'stylesheet';
                css.href = 'https://cdn.jsdelivr.net/npm/flatpickr@4.6.13/dist/flatpickr.min.css';
                document.head.appendChild(css);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É
                const theme = document.createElement('link');
                theme.rel = 'stylesheet';
                theme.href = 'https://cdn.jsdelivr.net/npm/flatpickr@4.6.13/dist/themes/material_blue.css';
                document.head.appendChild(theme);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º JS
                const script = document.createElement('script');
                script.src = 'https://cdn.jsdelivr.net/npm/flatpickr@4.6.13/dist/flatpickr.min.js';
                script.onload = () => {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
                    const scriptRu = document.createElement('script');
                    scriptRu.src = 'https://cdn.jsdelivr.net/npm/flatpickr@4.6.13/dist/l10n/ru.js';
                    scriptRu.onload = resolve;
                    scriptRu.onerror = reject;
                    document.head.appendChild(scriptRu);
                };
                script.onerror = reject;
                document.head.appendChild(script);
            });
        }

        /**
         * –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
         */
        findFields() {
            this.startDateField = document.getElementById('start_date') ||
                document.querySelector('input[name="start_date"]') ||
                document.querySelector('input[id*="start_date"]');

            this.durationField = document.getElementById('project_duration') ||
                document.querySelector('input[name="project_duration"]') ||
                document.querySelector('input[id*="duration"]');

            this.endDateField = document.getElementById('project_end_date') ||
                document.querySelector('input[name="project_end_date"]') ||
                document.querySelector('input[id*="end_date"]');
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
         */
        areFieldsValid() {
            return this.startDateField && this.durationField && this.endDateField;
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö date picker'–æ–≤ —Å Flatpickr
         */
        setupDatePickers() {
            const commonConfig = {
                locale: 'ru',
                dateFormat: 'Y-m-d',
                altFormat: 'd.m.Y',
                altInput: true,
                allowInput: true,
                clickOpens: true,
                theme: 'material_blue',
                time_24hr: true
            };

            // Date picker –¥–ª—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å–µ–≥–æ–¥–Ω—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (this.startDateField && !this.startDateField._flatpickr) {
                flatpickr(this.startDateField, {
                    ...commonConfig,
                    placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞',
                    defaultDate: this.startDateField.value || new Date(),
                    minDate: new Date().fp_incr(-365), // –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –¥–æ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥
                    maxDate: new Date().fp_incr(365), // –ò –¥–æ –≥–æ–¥–∞ –≤–ø–µ—Ä–µ–¥
                    onChange: () => {
                        setTimeout(() => this.calculateEndDate(), 100);
                        this.addFieldAnimation(this.startDateField);
                    }
                });
            }

            // Date picker –¥–ª—è –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
            if (this.endDateField && !this.endDateField._flatpickr) {
                flatpickr(this.endDateField, {
                    ...commonConfig,
                    placeholder: '–†–∞—Å—Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
                    clickOpens: false,
                    allowInput: false,
                    altInputClass: 'flatpickr-alt-input readonly-date-field'
                });
            }
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
         */
        setupEventListeners() {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ä–æ–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
            this.durationField.addEventListener('input', () => {
                this.calculateEndDate();
                this.addFieldAnimation(this.durationField);
            });
            
            this.durationField.addEventListener('change', () => this.calculateEndDate());
            this.durationField.addEventListener('keyup', () => this.calculateEndDate());

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
            this.durationField.addEventListener('input', (e) => {
                let value = parseInt(e.target.value);
                if (value && (value < 1 || value > 365)) {
                    this.showFieldError(this.durationField, '–°—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 365 –¥–Ω–µ–π');
                } else {
                    this.clearFieldError(this.durationField);
                }
            });
        }

        /**
         * –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
         */
        calculateEndDate() {
            if (!this.areFieldsValid()) return;

            const startValue = this.startDateField.value.trim();
            const durationValue = this.durationField.value.trim();

            console.log('üîÑ [EnhancedDateCalculator] –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', {
                '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞': startValue,
                '–°—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ (–¥–Ω–µ–π)': durationValue
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if (!startValue || !durationValue) {
                this.clearEndDate();
                return;
            }

            const workDays = parseInt(durationValue);
            if (isNaN(workDays) || workDays <= 0) {
                this.clearEndDate();
                this.showFieldError(this.durationField, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π');
                return;
            }

            // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
            const startDate = this.parseDate(startValue);
            if (!startDate || isNaN(startDate.getTime())) {
                this.clearEndDate();
                this.showFieldError(this.startDateField, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞');
                return;
            }

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            const endDate = this.addWorkDays(startDate, workDays);
            const formattedEndDate = this.formatDateForInput(endDate);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.endDateField.value = formattedEndDate;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º Flatpickr
            if (this.endDateField._flatpickr) {
                this.endDateField._flatpickr.setDate(endDate, false);
            }

            console.log('‚úÖ [EnhancedDateCalculator] –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞:', formattedEndDate);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            this.addSuccessAnimation();
            this.clearFieldError(this.durationField);
            this.clearFieldError(this.startDateField);
        }

        /**
         * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
         */
        parseDate(dateString) {
            if (dateString.includes('-')) {
                return new Date(dateString);
            } else if (dateString.includes('.')) {
                const [day, month, year] = dateString.split('.');
                return new Date(year, month - 1, day);
            } else {
                return new Date(dateString);
            }
        }

        /**
         * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –∫ –¥–∞—Ç–µ (–∏—Å–∫–ª—é—á–∞—è –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏)
         */
        addWorkDays(startDate, workDays) {
            let currentDate = new Date(startDate);
            let remainingDays = workDays;

            while (remainingDays > 0) {
                currentDate.setDate(currentDate.getDate() + 1);
                
                if (this.isWorkDay(currentDate)) {
                    remainingDays--;
                }
            }

            return currentDate;
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Ä–∞–±–æ—á–∏–º
         */
        isWorkDay(date) {
            const dayOfWeek = date.getDay();
            const dateString = this.formatDateForComparison(date);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞ = 6, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 0)
            if (dayOfWeek === 0 || dayOfWeek === 6) {
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
            if (this.holidays.includes(dateString)) {
                return false;
            }
            
            return true;
        }

        /**
         * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏
         */
        formatDateForComparison(date) {
            return date.getFullYear() + '-' + 
                   String(date.getMonth() + 1).padStart(2, '0') + '-' + 
                   String(date.getDate()).padStart(2, '0');
        }

        /**
         * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è input –ø–æ–ª—è
         */
        formatDateForInput(date) {
            return this.formatDateForComparison(date);
        }

        /**
         * –†–∞—Å—á–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
         */
        calculateInitialDates() {
            // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è
            if (!this.startDateField.value) {
                const today = new Date();
                this.startDateField.value = this.formatDateForInput(today);
                
                if (this.startDateField._flatpickr) {
                    this.startDateField._flatpickr.setDate(today, false);
                }
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            if (this.startDateField.value && this.durationField.value) {
                this.calculateEndDate();
            }
        }

        /**
         * –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
         */
        clearEndDate() {
            if (this.endDateField) {
                this.endDateField.value = '';
                if (this.endDateField._flatpickr) {
                    this.endDateField._flatpickr.clear();
                }
            }
        }

        /**
         * –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
         */
        addSuccessAnimation() {
            if (this.endDateField) {
                this.endDateField.classList.add('date-calculated-success');
                setTimeout(() => {
                    this.endDateField.classList.remove('date-calculated-success');
                }, 1500);
            }
        }

        /**
         * –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è
         */
        addFieldAnimation(field) {
            if (field) {
                field.classList.add('field-updated');
                setTimeout(() => {
                    field.classList.remove('field-updated');
                }, 300);
            }
        }

        /**
         * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ª—è
         */
        showFieldError(field, message) {
            this.clearFieldError(field);
            
            const errorDiv = document.createElement('div');
            errorDiv.className = 'field-error-message';
            errorDiv.textContent = message;
            
            field.classList.add('field-error');
            field.parentNode.appendChild(errorDiv);
        }

        /**
         * –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—è
         */
        clearFieldError(field) {
            field.classList.remove('field-error');
            const existingError = field.parentNode.querySelector('.field-error-message');
            if (existingError) {
                existingError.remove();
            }
        }

        /**
         * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
         */
        destroy() {
            this.initialized = false;
            
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º Flatpickr —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
            if (this.startDateField && this.startDateField._flatpickr) {
                this.startDateField._flatpickr.destroy();
            }
            if (this.endDateField && this.endDateField._flatpickr) {
                this.endDateField._flatpickr.destroy();
            }
        }
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É
    window.enhancedProjectDateCalculator = null;

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–∞—Ç
     */
    function initEnhancedProjectDateCalculator() {
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if (window.enhancedProjectDateCalculator) {
            window.enhancedProjectDateCalculator.destroy();
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        window.enhancedProjectDateCalculator = new EnhancedProjectDateCalculator();
        window.enhancedProjectDateCalculator.init();
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
    document.addEventListener('DOMContentLoaded', function() {
        console.log('üìÖ [EnhancedDateCalculator] DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        setTimeout(initEnhancedProjectDateCalculator, 500);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (typeof $ !== 'undefined') {
        $(document).on('shown.bs.modal', '#editModal', function() {
            console.log('üìã [EnhancedDateCalculator] –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
            setTimeout(initEnhancedProjectDateCalculator, 300);
        });
    }

    // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const observer = new MutationObserver(function(mutations) {
        let needsReinit = false;
        
        mutations.forEach(function(mutation) {
            if (mutation.addedNodes.length) {
                for (let node of mutation.addedNodes) {
                    if (node.nodeType === 1 && (
                        node.id === 'editModal' || 
                        node.querySelector && node.querySelector('#editModal')
                    )) {
                        needsReinit = true;
                        break;
                    }
                }
            }
        });
        
        if (needsReinit) {
            console.log('üîÑ [EnhancedDateCalculator] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
            setTimeout(initEnhancedProjectDateCalculator, 300);
        }
    });

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

    // –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    window.initEnhancedProjectDateCalculator = initEnhancedProjectDateCalculator;
</script>
