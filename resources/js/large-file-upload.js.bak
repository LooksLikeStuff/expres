/**
 * Модуль для загрузки больших файлов на Яндекс.Диск
 * Обеспечивает стабильную загрузку файлов без ограничений размера
 */

class LargeFileUploader {
    constructor() {
        this.maxRetries = 3;
        this.retryDelay = 2000;
        this.chunkSize = 2 * 1024 * 1024; // 2MB chunks для очень больших файлов
        this.maxFileSize = 10 * 1024 * 1024 * 1024; // 10GB максимум
        this.maxTotalSize = 50 * 1024 * 1024 * 1024; // 50GB общий максимум
    }

    /**
     * Инициализация обработчиков для больших файлов
     */
    init() {
        this.setupFileInputHandlers();
        this.setupFormHandlers();
        this.setupProgressIndicators();
        this.setupDragAndDrop();
    }

    /**
     * Настройка обработчиков для полей загрузки файлов
     */
    setupFileInputHandlers() {
        // Обработчик для файловых полей с классом yandex-upload
        $(document).on('change', '.yandex-upload', (e) => {
            const file = e.target.files[0];
            if (file) {
                this.validateAndPreviewFile(file, e.target);
            }
        });

        // Обработчик для множественной загрузки документов
        $(document).on('change', '#document-upload', (e) => {
            const files = Array.from(e.target.files);
            if (files.length > 0) {
                this.validateMultipleFiles(files, e.target);
            }
        });

        // Обработчик для всех файловых полей
        $(document).on('change', 'input[type="file"]', (e) => {
            if (e.target.files && e.target.files.length > 0) {
                this.handleFileSelection(e.target);
            }
        });
    }

    /**
     * Настройка Drag & Drop
     */
    setupDragAndDrop() {
        $(document).on('dragover', '.yandex-upload, .document-upload-input', (e) => {
            e.preventDefault();
            $(e.target).addClass('dragover');
        });

        $(document).on('dragleave', '.yandex-upload, .document-upload-input', (e) => {
            e.preventDefault();
            $(e.target).removeClass('dragover');
        });

        $(document).on('drop', '.yandex-upload, .document-upload-input', (e) => {
            e.preventDefault();
            $(e.target).removeClass('dragover');
            
            const files = e.originalEvent.dataTransfer.files;
            if (files.length > 0) {
                e.target.files = files;
                this.handleFileSelection(e.target);
            }
        });
    }

    /**
     * Обработка выбора файлов
     */
    handleFileSelection(input) {
        const files = Array.from(input.files);
        
        if (input.multiple) {
            this.validateMultipleFiles(files, input);
        } else if (files.length > 0) {
            this.validateAndPreviewFile(files[0], input);
        }
    }

    /**
     * Настройка обработчиков форм для больших файлов
     */
    setupFormHandlers() {
        // Переопределяем стандартную отправку формы для больших файлов
        $(document).on('submit', '#editForm', (e) => {
            const hasLargeFiles = this.checkForLargeFiles(e.target);
            if (hasLargeFiles) {
                e.preventDefault();
                this.handleLargeFileUpload(e.target);
            }
        });

        // Обработчик для кнопки загрузки документов
        $(document).on('click', '#upload-documents-btn', (e) => {
            e.preventDefault();
            this.handleDocumentUpload();
        });
    }

    /**
     * Настройка индикаторов прогресса
     */
    setupProgressIndicators() {
        // Создаем улучшенный индикатор загрузки для больших файлов
        if (!document.getElementById('large-file-loader')) {
            const loader = $(`
                <div id="large-file-loader" class="large-file-loader" style="display: none;">
                    <div class="loader-overlay">
                        <div class="loader-content">
                            <div class="loader-icon">
                                <i class="fas fa-cloud-upload-alt fa-3x"></i>
                            </div>
                            <h3>Загрузка файлов</h3>
                            <p class="loader-status">Подготовка к загрузке...</p>
                            <div class="progress-container">
                                <div class="progress-bar" style="width: 0%"></div>
                                <span class="progress-text">0%</span>
                            </div>
                            <div class="loader-details">
                                <div class="upload-speed">Скорость: -- MB/s</div>
                                <div class="time-remaining">Осталось: --:--</div>
                                <div class="file-info">Файл: --</div>
                            </div>
                            <button class="cancel-upload-btn" style="margin-top: 15px; display: none;">
                                Отменить загрузку
                            </button>
                        </div>
                    </div>
                </div>
            `);
            $('body').append(loader);

            // Обработчик отмены загрузки
            $('.cancel-upload-btn').on('click', () => {
                this.cancelUpload();
            });
        }
    }

    /**
     * Проверка наличия больших файлов
     */
    checkForLargeFiles(form) {
        const fileInputs = form.querySelectorAll('input[type="file"]');
        let hasLargeFiles = false;

        fileInputs.forEach(input => {
            if (input.files && input.files.length > 0) {
                Array.from(input.files).forEach(file => {
                    // Считаем большими файлы размером более 50MB
                    if (file.size > 50 * 1024 * 1024) {
                        hasLargeFiles = true;
                    }
                });
            }
        });

        return hasLargeFiles;
    }

    /**
     * Валидация и предпросмотр файла
     */
    validateAndPreviewFile(file, input) {
        if (file.size > this.maxFileSize) {
            this.showError(`Размер файла не должен превышать ${this.formatBytes(this.maxFileSize)}`);
            input.value = '';
            return false;
        }

        // Показываем информацию о файле
        this.showFileInfo(file, input);
        return true;
    }

    /**
     * Валидация множественных файлов
     */
    validateMultipleFiles(files, input) {
        let totalSize = 0;

        files.forEach(file => {
            totalSize += file.size;
        });

        if (totalSize > this.maxTotalSize) {
            this.showError(`Общий размер файлов не должен превышать ${this.formatBytes(this.maxTotalSize)}`);
            input.value = '';
            return false;
        }

        // Обновляем счетчик файлов
        this.updateFileCounter(files);
        return true;
    }

    /**
     * Обработка загрузки документов
     */
    async handleDocumentUpload() {
        const fileInput = $('#document-upload')[0];
        const files = fileInput.files;
        
        if (files.length === 0) {
            this.showError('Пожалуйста, выберите файлы для загрузки');
            return;
        }

        const dealId = $('#dealIdField').val();
        if (!dealId) {
            this.showError('Не удалось определить ID сделки');
            return;
        }

        // Создаем FormData для отправки файлов
        const formData = new FormData();
        formData.append('_token', $('meta[name="csrf-token"]').attr('content'));
        formData.append('deal_id', dealId);
        
        for (let i = 0; i < files.length; i++) {
            formData.append('documents[]', files[i]);
        }

        this.showLargeFileLoader();
        this.updateLoaderStatus('Загружаем документы...');

        try {
            const response = await this.performDocumentUpload(formData);
            
            if (response.success) {
                this.updateLoaderStatus('Документы успешно загружены!');
                setTimeout(() => {
                    this.hideLargeFileLoader();
                    this.showSuccessMessage('Документы успешно загружены');
                    
                    // Очищаем поле выбора файлов
                    fileInput.value = '';
                    $('.selected-files-count').text('Файлы не выбраны');
                    $('#upload-documents-btn').prop('disabled', true);
                    
                    // Обновляем список документов если есть соответствующая функция
                    if (typeof updateDocumentsList === 'function') {
                        updateDocumentsList(response.documents);
                    }
                }, 1000);
            } else {
                throw new Error(response.message || 'Ошибка загрузки документов');
            }
        } catch (error) {
            this.hideLargeFileLoader();
            this.showError('Ошибка загрузки документов: ' + error.message);
        }
    }

    /**
     * Выполнение загрузки документов
     */
    performDocumentUpload(formData) {
        return new Promise((resolve, reject) => {
            const dealId = $('#dealIdField').val();
            const startTime = Date.now();

            $.ajax({
                url: `/deal/${dealId}/upload-documents`,
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                timeout: 0, // Без ограничений времени
                xhr: () => {
                    const xhr = new window.XMLHttpRequest();
                    
                    // Отслеживание прогресса загрузки
                    xhr.upload.addEventListener('progress', (e) => {
                        if (e.lengthComputable) {
                            const percent = Math.round((e.loaded / e.total) * 100);
                            const speed = this.calculateUploadSpeed(e.loaded, startTime);
                            const remaining = this.calculateTimeRemaining(e.loaded, e.total, speed);
                            
                            this.updateProgress(percent, speed, remaining);
                        }
                    });

                    return xhr;
                },
                success: (response) => {
                    resolve(response);
                },
                error: (xhr, status, error) => {
                    reject(new Error(`${status}: ${error}`));
                }
            });
        });
    }

    /**
     * Обработка загрузки больших файлов
     */
    async handleLargeFileUpload(form) {
        const formData = new FormData(form);
        const dealId = $('#dealIdField').val();
        
        this.showLargeFileLoader();
        this.updateLoaderStatus('Начинаем загрузку файлов...');

        try {
            const response = await this.uploadWithRetry(formData, dealId);
            
            if (response.success) {
                this.updateLoaderStatus('Загрузка завершена успешно!');
                setTimeout(() => {
                    this.hideLargeFileLoader();
                    this.showSuccessMessage('Файлы успешно загружены');
                    
                    // Обновляем страницу через 2 секунды
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                }, 1000);
            } else {
                throw new Error(response.message || 'Ошибка загрузки');
            }
        } catch (error) {
            this.hideLargeFileLoader();
            this.showError('Ошибка загрузки: ' + error.message);
        }
    }

    /**
     * Загрузка с повторными попытками
     */
    async uploadWithRetry(formData, dealId, attempt = 1) {
        try {
            return await this.performUpload(formData, dealId);
        } catch (error) {
            if (attempt < this.maxRetries) {
                this.updateLoaderStatus(`Попытка ${attempt + 1} из ${this.maxRetries}...`);
                await this.delay(this.retryDelay);
                return this.uploadWithRetry(formData, dealId, attempt + 1);
            } else {
                throw error;
            }
        }
    }

    /**
     * Выполнение загрузки
     */
    performUpload(formData, dealId) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            this.currentXhr = null;

            $.ajax({
                url: `/deal/update/${dealId}`,
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                timeout: 0, // Без ограничений времени
                xhr: () => {
                    const xhr = new window.XMLHttpRequest();
                    this.currentXhr = xhr;
                    
                    // Отслеживание прогресса загрузки
                    xhr.upload.addEventListener('progress', (e) => {
                        if (e.lengthComputable) {
                            const percent = Math.round((e.loaded / e.total) * 100);
                            const speed = this.calculateUploadSpeed(e.loaded, startTime);
                            const remaining = this.calculateTimeRemaining(e.loaded, e.total, speed);
                            
                            this.updateProgress(percent, speed, remaining);
                        }
                    });

                    return xhr;
                },
                success: (response) => {
                    this.currentXhr = null;
                    resolve(response);
                },
                error: (xhr, status, error) => {
                    this.currentXhr = null;
                    reject(new Error(`${status}: ${error}`));
                }
            });
        });
    }

    /**
     * Отмена загрузки
     */
    cancelUpload() {
        if (this.currentXhr) {
            this.currentXhr.abort();
            this.currentXhr = null;
        }
        
        this.hideLargeFileLoader();
        this.showError('Загрузка отменена пользователем');
    }

    /**
     * Вычисление скорости загрузки
     */
    calculateUploadSpeed(uploadedBytes, startTime) {
        const elapsed = (Date.now() - startTime) / 1000;
        return elapsed > 0 ? uploadedBytes / elapsed : 0;
    }

    /**
     * Вычисление оставшегося времени
     */
    calculateTimeRemaining(uploaded, total, speed) {
        if (speed === 0) return 0;
        return (total - uploaded) / speed;
    }

    /**
     * Обновление прогресса
     */
    updateProgress(percent, speed, remaining) {
        $('.large-file-loader .progress-bar').css('width', percent + '%');
        $('.large-file-loader .progress-text').text(percent + '%');
        $('.large-file-loader .upload-speed').text(`Скорость: ${this.formatBytes(speed)}/s`);
        $('.large-file-loader .time-remaining').text(`Осталось: ${this.formatTime(remaining)}`);
        
        // Показываем кнопку отмены для длительных загрузок
        if (percent > 5 && remaining > 30) {
            $('.cancel-upload-btn').show();
        }
    }

    /**
     * Показать информацию о файле
     */
    showFileInfo(file, input) {
        const info = `
            <div class="file-info-tooltip" style="margin-top: 5px; font-size: 12px; color: #666;">
                <i class="fas fa-info-circle"></i> 
                ${file.name} (${this.formatBytes(file.size)})
            </div>
        `;
        
        // Удаляем предыдущую информацию
        $(input).siblings('.file-info-tooltip').remove();
        
        // Добавляем новую информацию
        $(input).after(info);
    }

    /**
     * Обновление счетчика файлов
     */
    updateFileCounter(files) {
        const totalSize = files.reduce((sum, file) => sum + file.size, 0);
        $('.selected-files-count').text(
            `Выбрано файлов: ${files.length} (общий размер: ${this.formatBytes(totalSize)})`
        );
        
        // Активируем кнопку загрузки
        $('#upload-documents-btn').prop('disabled', false);
    }

    /**
     * Показать загрузчик больших файлов
     */
    showLargeFileLoader() {
        $('#large-file-loader').fadeIn(300).addClass('active');
    }

    /**
     * Скрыть загрузчик больших файлов
     */
    hideLargeFileLoader() {
        $('#large-file-loader').fadeOut(300).removeClass('active');
        $('.cancel-upload-btn').hide();
    }

    /**
     * Обновить статус загрузчика
     */
    updateLoaderStatus(status) {
        $('.large-file-loader .loader-status').text(status);
    }

    /**
     * Показать сообщение об успехе
     */
    showSuccessMessage(message) {
        // Используем существующую функцию или создаем простое уведомление
        if (typeof showDealUpdateSuccess === 'function') {
            showDealUpdateSuccess(message);
        } else {
            this.showNotification(message, 'success');
        }
    }

    /**
     * Показать ошибку
     */
    showError(message) {
        if (typeof showDealUpdateError === 'function') {
            showDealUpdateError(message);
        } else {
            this.showNotification('Ошибка: ' + message, 'error');
        }
    }

    /**
     * Показать уведомление
     */
    showNotification(message, type = 'info') {
        const notification = $(`
            <div class="upload-notification ${type}" style="position: fixed; top: 20px; right: 20px; z-index: 999999; 
                 background: ${type === 'success' ? '#4caf50' : type === 'error' ? '#f44336' : '#2196f3'}; 
                 color: white; padding: 15px 20px; border-radius: 4px; box-shadow: 0 4px 8px rgba(0,0,0,0.3);">
                ${message}
            </div>
        `);
        
        $('body').append(notification);
        
        setTimeout(() => {
            notification.fadeOut(500, function() {
                $(this).remove();
            });
        }, 5000);
    }

    /**
     * Форматирование размера файла
     */
    formatBytes(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    /**
     * Форматирование времени
     */
    formatTime(seconds) {
        if (!seconds || seconds === Infinity) return '--:--';
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = Math.floor(seconds % 60);
        
        if (hours > 0) {
            return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        } else {
            return `${minutes}:${secs.toString().padStart(2, '0')}`;
        }
    }

    /**
     * Задержка
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// Инициализация при загрузке документа
$(document).ready(function() {
    const uploader = new LargeFileUploader();
    uploader.init();
    
    // Делаем доступным глобально
    window.largeFileUploader = uploader;
    
    console.log('LargeFileUploader инициализирован для поддержки файлов без ограничений размера');
});
