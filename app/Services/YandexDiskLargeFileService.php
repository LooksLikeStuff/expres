<?php

namespace App\Services;

use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Storage;
use GuzzleHttp\Client;
use GuzzleHttp\Psr7\Utils;
use Exception;

/**
 * –ù–∞–¥–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–æ 2GB –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤
 */
class YandexDiskLargeFileService
{
    private const YANDEX_DISK_API_URL = 'https://cloud-api.yandex.net';
    private const CHUNK_SIZE = 2 * 1024 * 1024; // 2MB chunks
    private const MAX_RETRIES = 3;
    private const TIMEOUT_SECONDS = 0; // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    private const CONNECT_TIMEOUT = 60;
    
    private string $token;
    private Client $httpClient;
    
    public function __construct()
    {
        $this->token = config('services.yandex_disk.token');
        
        if (!$this->token) {
            throw new Exception('Yandex Disk token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }
        
        $this->initializeHttpClient();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
     */
    private function initializeHttpClient(): void
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ cURL –¥–æ—Å—Ç—É–ø–µ–Ω
        if (!extension_loaded('curl')) {
            throw new Exception('–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ cURL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }

        $this->httpClient = new Client([
            'timeout' => 0, // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
            'connect_timeout' => 30, // –£–º–µ–Ω—å—à–∞–µ–º timeout –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            'read_timeout' => 0, // –û—Ç–∫–ª—é—á–∞–µ–º timeout —á—Ç–µ–Ω–∏—è
            'headers' => [
                'Authorization' => 'OAuth ' . $this->token,
                'User-Agent' => 'YandexDiskLargeFileUploader/3.1-Fixed',
                'Accept' => 'application/json',
                'Accept-Encoding' => 'gzip, deflate',
            ],
            'curl' => $this->getSafeCurlOptions(),
            'stream' => true,
            'verify' => false, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            'http_errors' => false, // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ HTTP –æ—à–∏–±–∫–∏
        ]);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ cURL —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç
     */
    private function getSafeCurlOptions(): array
    {
        $options = [];

        // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cURL, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–¥–∞
        if (defined('CURLOPT_FOLLOWLOCATION')) {
            $options[CURLOPT_FOLLOWLOCATION] = true;
        }
        
        if (defined('CURLOPT_MAXREDIRS')) {
            $options[CURLOPT_MAXREDIRS] = 5;
        }
        
        if (defined('CURLOPT_SSL_VERIFYPEER')) {
            $options[CURLOPT_SSL_VERIFYPEER] = false; // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }
        
        if (defined('CURLOPT_SSL_VERIFYHOST')) {
            $options[CURLOPT_SSL_VERIFYHOST] = 0; // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }
        
        if (defined('CURLOPT_NOPROGRESS')) {
            $options[CURLOPT_NOPROGRESS] = false;
        }
        
        // –ò–∑–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –±–æ—Ä—å–±—ã —Å error 52
        if (defined('CURLOPT_FRESH_CONNECT')) {
            $options[CURLOPT_FRESH_CONNECT] = false; // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        }
        
        if (defined('CURLOPT_FORBID_REUSE')) {
            $options[CURLOPT_FORBID_REUSE] = false; // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        }
        
        if (defined('CURL_HTTP_VERSION_1_1')) {
            $options[CURLOPT_HTTP_VERSION] = CURL_HTTP_VERSION_1_1; // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP/1.1
        }
        
        if (defined('CURLOPT_USERAGENT')) {
            $options[CURLOPT_USERAGENT] = 'YandexDiskLargeFileUploader/3.1-Fixed';
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ—Ä—å–±—ã —Å error 52 (Empty reply from server)
        if (defined('CURLOPT_TIMEOUT')) {
            $options[CURLOPT_TIMEOUT] = 0; // –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
        }
        
        if (defined('CURLOPT_CONNECTTIMEOUT')) {
            $options[CURLOPT_CONNECTTIMEOUT] = 30; // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        }
        
        if (defined('CURLOPT_LOW_SPEED_LIMIT')) {
            $options[CURLOPT_LOW_SPEED_LIMIT] = 1024; // –ú–∏–Ω–∏–º—É–º 1KB/s
        }
        
        if (defined('CURLOPT_LOW_SPEED_TIME')) {
            $options[CURLOPT_LOW_SPEED_TIME] = 30; // –í —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        $optionalOptions = $this->getOptionalCurlOptions();
        foreach ($optionalOptions as $option => $value) {
            $options[$option] = $value;
        }

        return $options;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
     */
    public function uploadFile(UploadedFile $file, string $dealId, string $fieldName): array
    {
        $startTime = microtime(true);
        $fileName = $this->generateFileName($file, $dealId, $fieldName);
        $remotePath = $this->getRemotePath($dealId, $fieldName, $fileName);
        $fileSize = $file->getSize();
        
        Log::info('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫', [
            'file_name' => $fileName,
            'file_size' => $this->formatBytes($fileSize),
            'remote_path' => $remotePath,
            'deal_id' => $dealId,
            'field_name' => $fieldName
        ]);
        
        try {
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            $this->createDealFolder($dealId);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            $uploadUrl = $this->getUploadUrl($remotePath, true); // overwrite = true
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π
            $result = $this->uploadFileStream($file, $uploadUrl, $fileName, $fileSize);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
            $publicUrl = $this->makeFilePublic($remotePath);
            
            $uploadTime = round(microtime(true) - $startTime, 2);
            $speed = $fileSize > 0 ? round($fileSize / ($uploadTime ?: 1) / 1024 / 1024, 2) : 0;
            
            $response = [
                'success' => true,
                'data' => [
                    'yandex_disk_url' => $publicUrl,
                    'original_name' => $file->getClientOriginalName(),
                    'file_size' => $fileSize,
                    'file_size_formatted' => $this->formatBytes($fileSize),
                    'upload_time' => $uploadTime,
                    'upload_speed' => $speed . ' MB/s',
                    'remote_path' => $remotePath,
                    'field_name' => $fieldName,
                ]
            ];
            
            Log::info('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫', [
                'file_name' => $fileName,
                'upload_time' => $uploadTime . 's',
                'upload_speed' => $speed . ' MB/s',
                'public_url' => $publicUrl
            ]);
            
            return $response;
            
        } catch (Exception $e) {
            Log::error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫', [
                'file_name' => $fileName,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return [
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–¥–µ–ª–∫–∏
     */
    private function createDealFolder(string $dealId): void
    {
        $folderPath = "/deal_{$dealId}";
        
        try {
            $response = $this->httpClient->put(self::YANDEX_DISK_API_URL . '/v1/disk/resources', [
                'query' => [
                    'path' => $folderPath
                ]
            ]);
            
            if ($response->getStatusCode() === 201) {
                Log::info("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏: {$folderPath}");
            }
        } catch (Exception $e) {
            // –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            Log::debug("–ü–∞–ø–∫–∞ {$folderPath} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: " . $e->getMessage());
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
     */
    private function getUploadUrl(string $remotePath, bool $overwrite = false): string
    {
        $attempt = 0;
        
        while ($attempt < self::MAX_RETRIES) {
            try {
                $response = $this->httpClient->get(self::YANDEX_DISK_API_URL . '/v1/disk/resources/upload', [
                    'query' => [
                        'path' => $remotePath,
                        'overwrite' => $overwrite ? 'true' : 'false'
                    ]
                ]);
                
                $data = json_decode($response->getBody()->getContents(), true);
                
                if (isset($data['href'])) {
                    Log::info('üîó –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', [
                        'remote_path' => $remotePath,
                        'upload_url' => substr($data['href'], 0, 100) . '...'
                    ]);
                    return $data['href'];
                }
                
                throw new Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
                
            } catch (Exception $e) {
                $attempt++;
                Log::warning("–ü–æ–ø—ã—Ç–∫–∞ {$attempt} –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å: " . $e->getMessage());
                
                if ($attempt >= self::MAX_RETRIES) {
                    throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ {$attempt} –ø–æ–ø—ã—Ç–æ–∫: " . $e->getMessage());
                }
                
                sleep(2 * $attempt); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            }
        }
        
        throw new Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π
     */
    private function uploadFileStream(UploadedFile $file, string $uploadUrl, string $fileName, int $fileSize): bool
    {
        $filePath = $file->getPathname();
        $attempt = 0;
        
        while ($attempt < self::MAX_RETRIES) {
            try {
                Log::info("üì§ –ü–æ–ø—ã—Ç–∫–∞ " . ($attempt + 1) . " –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {$fileName} —Ä–∞–∑–º–µ—Ä–æ–º " . $this->formatBytes($fileSize));
                Log::info("üîó URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: " . substr($uploadUrl, 0, 100) . "...");
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
                $fileHandle = fopen($filePath, 'rb');
                if (!$fileHandle) {
                    throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è: {$filePath}");
                }
                
                // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫
                $fileStream = Utils::streamFor($fileHandle);
                
                // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                $uploadClient = new Client([
                    'timeout' => 0, // –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
                    'connect_timeout' => 30, // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    'read_timeout' => 0, // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
                    'curl' => $this->getUploadCurlOptions($fileName, $fileSize),
                    'verify' => false, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
                    'http_errors' => false, // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ HTTP –æ—à–∏–±–∫–∏
                ]);
                
                Log::info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ {$fileName}...");
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                $response = $uploadClient->put($uploadUrl, [
                    'body' => $fileStream,
                    'headers' => [
                        'Content-Type' => 'application/octet-stream',
                        'Content-Length' => (string)$fileSize,
                    ]
                ]);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                fclose($fileHandle);
                
                $statusCode = $response->getStatusCode();
                $responseBody = $response->getBody()->getContents();
                
                Log::info("üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: –°—Ç–∞—Ç—É—Å {$statusCode}, –¢–µ–ª–æ: " . substr($responseBody, 0, 200));
                
                if ($statusCode >= 200 && $statusCode < 300) {
                    Log::info("‚úÖ –§–∞–π–ª {$fileName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ " . ($attempt + 1));
                    return true;
                }
                
                throw new Exception("HTTP —Å—Ç–∞—Ç—É—Å {$statusCode}: " . $responseBody);
                
            } catch (Exception $e) {
                if (isset($fileHandle) && is_resource($fileHandle)) {
                    fclose($fileHandle);
                }
                
                $attempt++;
                $errorMessage = $e->getMessage();
                
                Log::warning("‚ùå –ü–æ–ø—ã—Ç–∫–∞ {$attempt} –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {$fileName} –Ω–µ —É–¥–∞–ª–∞—Å—å: " . $errorMessage);
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ cURL error 52
                if (strpos($errorMessage, 'cURL error 52') !== false || strpos($errorMessage, 'Empty reply from server') !== false) {
                    Log::warning("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ cURL 52 (Empty reply from server) - –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏");
                    
                    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                    try {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ URL
                        $parts = explode('/', trim($uploadUrl, '/'));
                        if (count($parts) >= 2) {
                            $dealId = $parts[count($parts) - 2] ?? '';
                            $fieldName = $parts[count($parts) - 1] ?? '';
                            if ($dealId && $fieldName) {
                                $remotePath = $this->getRemotePath($dealId, $fieldName, $fileName);
                                $uploadUrl = $this->getUploadUrl($remotePath, true);
                                Log::info("üîó –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: " . substr($uploadUrl, 0, 100) . "...");
                            }
                        }
                    } catch (Exception $urlError) {
                        Log::error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: " . $urlError->getMessage());
                    }
                }
                
                if ($attempt >= self::MAX_RETRIES) {
                    throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ {$attempt} –ø–æ–ø—ã—Ç–æ–∫: " . $errorMessage);
                }
                
                // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                $delay = min(10, 2 * $attempt); // –£–º–µ–Ω—å—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                Log::info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {$delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...");
                sleep($delay);
            }
        }
        
        return false;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª
     */
    private function makeFilePublic(string $remotePath): string
    {
        try {
            // –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –ø—É–±–ª–∏—á–Ω—ã–º
            $response = $this->httpClient->put(self::YANDEX_DISK_API_URL . '/v1/disk/resources/publish', [
                'query' => [
                    'path' => $remotePath
                ]
            ]);
            
            if ($response->getStatusCode() === 200) {
                // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
                $response = $this->httpClient->get(self::YANDEX_DISK_API_URL . '/v1/disk/resources', [
                    'query' => [
                        'path' => $remotePath,
                        'fields' => 'public_url'
                    ]
                ]);
                
                $data = json_decode($response->getBody()->getContents(), true);
                
                if (isset($data['public_url'])) {
                    Log::info('üåç –°–æ–∑–¥–∞–Ω–∞ –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞', [
                        'remote_path' => $remotePath,
                        'public_url' => $data['public_url']
                    ]);
                    return $data['public_url'];
                }
            }
            
            throw new Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É');
            
        } catch (Exception $e) {
            Log::error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏: ' . $e->getMessage());
            throw $e;
        }
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
     */
    public function deleteFile(string $dealId, string $fieldName): bool
    {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ –ø—É—Ç–∏
            $remotePath = $this->getRemotePathPattern($dealId, $fieldName);
            
            // –ò—â–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ —Å–¥–µ–ª–∫–∏
            $files = $this->listDealFiles($dealId);
            $fileToDelete = null;
            
            foreach ($files as $file) {
                if (strpos($file['path'], $fieldName) !== false) {
                    $fileToDelete = $file['path'];
                    break;
                }
            }
            
            if (!$fileToDelete) {
                Log::warning("–§–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {$remotePath}");
                return false;
            }
            
            $response = $this->httpClient->delete(self::YANDEX_DISK_API_URL . '/v1/disk/resources', [
                'query' => [
                    'path' => $fileToDelete,
                    'permanently' => 'true'
                ]
            ]);
            
            if ($response->getStatusCode() === 204) {
                Log::info('üóëÔ∏è –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞', [
                    'remote_path' => $fileToDelete
                ]);
                return true;
            }
            
            return false;
            
        } catch (Exception $e) {
            Log::error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞: ' . $e->getMessage());
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ —Å–¥–µ–ª–∫–∏
     */
    private function listDealFiles(string $dealId): array
    {
        try {
            $folderPath = "/deal_{$dealId}";
            
            $response = $this->httpClient->get(self::YANDEX_DISK_API_URL . '/v1/disk/resources', [
                'query' => [
                    'path' => $folderPath,
                    'limit' => 100
                ]
            ]);
            
            $data = json_decode($response->getBody()->getContents(), true);
            
            if (isset($data['_embedded']['items'])) {
                return $data['_embedded']['items'];
            }
            
            return [];
            
        } catch (Exception $e) {
            Log::error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: ' . $e->getMessage());
            return [];
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
     */
    public function healthCheck(): array
    {
        try {
            $response = $this->httpClient->get(self::YANDEX_DISK_API_URL . '/v1/disk', [
                'timeout' => 10
            ]);
            
            if ($response->getStatusCode() === 200) {
                $data = json_decode($response->getBody()->getContents(), true);
                
                return [
                    'status' => 'ok',
                    'total_space' => $this->formatBytes($data['total_space'] ?? 0),
                    'used_space' => $this->formatBytes($data['used_space'] ?? 0),
                    'free_space' => $this->formatBytes(($data['total_space'] ?? 0) - ($data['used_space'] ?? 0)),
                ];
            }
            
            return ['status' => 'error', 'message' => 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'];
            
        } catch (Exception $e) {
            return ['status' => 'error', 'message' => $e->getMessage()];
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
     */
    private function generateFileName(UploadedFile $file, string $dealId, string $fieldName): string
    {
        $originalName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);
        $extension = $file->getClientOriginalExtension();
        $timestamp = date('Y-m-d_H-i-s');
        
        // –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        $cleanName = preg_replace('/[^a-zA-Z0-9_\-.]/', '_', $originalName);
        
        return "deal_{$dealId}_{$fieldName}_{$timestamp}_{$cleanName}.{$extension}";
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
     */
    private function getRemotePath(string $dealId, string $fieldName, string $fileName): string
    {
        return "/deal_{$dealId}/{$fileName}";
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø—É—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
     */
    private function getRemotePathPattern(string $dealId, string $fieldName): string
    {
        return "/deal_{$dealId}/deal_{$dealId}_{$fieldName}_";
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
     */
    private function formatBytes(int $bytes, int $precision = 2): string
    {
        $units = ['B', 'KB', 'MB', 'GB', 'TB'];
        
        for ($i = 0; $bytes > 1024 && $i < count($units) - 1; $i++) {
            $bytes /= 1024;
        }
        
        return round($bytes, $precision) . ' ' . $units[$i];
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
     */
    public function getFileInfo(string $dealId, string $fieldName): ?array
    {
        try {
            $files = $this->listDealFiles($dealId);
            
            foreach ($files as $file) {
                if (strpos($file['path'], $fieldName) !== false) {
                    return [
                        'name' => $file['name'],
                        'size' => $this->formatBytes($file['size']),
                        'created' => $file['created'],
                        'modified' => $file['modified'],
                        'public_url' => $file['public_url'] ?? null,
                        'path' => $file['path']
                    ];
                }
            }
            
            return null;
            
        } catch (Exception $e) {
            Log::error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: ' . $e->getMessage());
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö CURL –Ω–∞—Å—Ç—Ä–æ–µ–∫
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
     */
    private function getOptionalCurlOptions(): array
    {
        $options = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å TCP –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        if (defined('CURLOPT_TCP_NODELAY')) {
            $options[CURLOPT_TCP_NODELAY] = true;
        }
        
        if (defined('CURLOPT_TCP_KEEPALIVE')) {
            $options[CURLOPT_TCP_KEEPALIVE] = 1;
        }
        
        if (defined('CURLOPT_TCP_KEEPIDLE')) {
            $options[CURLOPT_TCP_KEEPIDLE] = 60;
        }
        
        if (defined('CURLOPT_TCP_KEEPINTVL')) {
            $options[CURLOPT_TCP_KEEPINTVL] = 30;
        }
        
        if (defined('CURLOPT_BUFFERSIZE')) {
            $options[CURLOPT_BUFFERSIZE] = self::CHUNK_SIZE;
        }

        return $options;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ cURL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
     */
    private function getUploadCurlOptions(string $fileName, int $fileSize): array
    {
        $options = $this->getSafeCurlOptions();

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        if (defined('CURLOPT_UPLOAD')) {
            $options[CURLOPT_UPLOAD] = true;
        }
        
        if (defined('CURLOPT_INFILESIZE')) {
            $options[CURLOPT_INFILESIZE] = $fileSize;
        }
        
        if (defined('CURLOPT_BUFFERSIZE')) {
            $options[CURLOPT_BUFFERSIZE] = self::CHUNK_SIZE;
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ—Ä—å–±—ã —Å error 52
        if (defined('CURLOPT_TIMEOUT')) {
            $options[CURLOPT_TIMEOUT] = 0; // –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
        }
        
        if (defined('CURLOPT_CONNECTTIMEOUT')) {
            $options[CURLOPT_CONNECTTIMEOUT] = 30; // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        }
        
        if (defined('CURLOPT_NOSIGNAL')) {
            $options[CURLOPT_NOSIGNAL] = true; // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º Expect: 100-continue –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        if (defined('CURLOPT_HTTPHEADER')) {
            $options[CURLOPT_HTTPHEADER] = ['Expect:'];
        }

        // Callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if (defined('CURLOPT_PROGRESSFUNCTION')) {
            $lastLoggedPercent = 0;
            $options[CURLOPT_PROGRESSFUNCTION] = function($downloadTotal, $downloaded, $uploadTotal, $uploaded) use ($fileName, &$lastLoggedPercent) {
                if ($uploadTotal > 0) {
                    $percent = round(($uploaded / $uploadTotal) * 100, 1);
                    // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 25%
                    if ($percent > 0 && $percent >= $lastLoggedPercent + 25) {
                        Log::info("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ {$fileName}: {$percent}% ({$this->formatBytes($uploaded)}/{$this->formatBytes($uploadTotal)})");
                        $lastLoggedPercent = $percent;
                    }
                }
                return 0; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            };
        }

        return $options;
    }
}
