/**
 * –°–∏—Å—Ç–µ–º–∞ drag & drop –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ –∫–ª–∞—Å—Å–æ–≤
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let dragCounter = 0;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã drag & drop
 */
function initDragDropFileUpload() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Drag & Drop —Å–∏—Å—Ç–µ–º—ã');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ file input –ø–æ–ª—è
    const fileInputs = document.querySelectorAll('input[type="file"]:not([data-drag-drop-initialized])');
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${fileInputs.length} –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π:`);
    fileInputs.forEach((input, index) => {
        console.log(`   ${index + 1}. ID: ${input.id}, Name: ${input.name}, Parent: ${input.parentNode.tagName}`);
    });
    
    fileInputs.forEach(input => {
        initFileInput(input);
    });
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    preventDefaults();
    
    console.log(`‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${fileInputs.length} —Ñ–∞–π–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π`);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ file input
 */
function initFileInput(input) {
    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
    input.setAttribute('data-drag-drop-initialized', 'true');
    
    // –°–æ–∑–¥–∞–µ–º drop zone
    const dropZone = createDropZone(input);
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫ input
    bindFileInputEvents(input);
    
    console.log(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω input: ${input.name || input.id} (${input.type})`);
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ drop zone –¥–ª—è file input
 */
function createDropZone(input) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω drop zone
    const existingDropZone = input.nextElementSibling;
    if (existingDropZone && existingDropZone.classList.contains('file-drop-zone')) {
        console.log('üîÑ Drop zone —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è', input.name || input.id);
        return existingDropZone;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π input
   
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–µ
    const fieldInfo = getFieldInfo(input);
    
    // –°–æ–∑–¥–∞–µ–º drop zone
    const dropZone = document.createElement('div');
    dropZone.className = 'file-drop-zone';
    dropZone.innerHTML = `
        <div class="drop-area">
            <div class="drop-icon">
                <i class="${fieldInfo.icon}"></i>
            </div>
            <div class="drop-text">
                <div class="drop-title">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞</div>
                <div class="drop-subtitle">–∏–ª–∏ <span class="drop-link">–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</span></div>
                <div class="drop-info">
                    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ${fieldInfo.types}<br>
                    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${fieldInfo.maxSize}
                </div>
            </div>
        </div>
        <div class="file-info">
            <div class="file-info-content">
                <div class="file-info-icon">
                    <i class="fas fa-file"></i>
                </div>
                <div class="file-info-details">
                    <div class="file-info-name"></div>
                    <div class="file-info-size"></div>
                </div>
                <button type="button" class="file-remove" title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <div class="upload-progress">
            <div class="progress-bar">
                <div class="progress-fill"></div>
            </div>
            <div class="progress-text">0%</div>
        </div>
        <div class="error-message"></div>
    `;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º drop zone –ø–æ—Å–ª–µ input
    input.parentNode.insertBefore(dropZone, input.nextSibling);
    
    console.log(`üì¶ –°–æ–∑–¥–∞–Ω drop zone –¥–ª—è ${input.name || input.id}`);
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫ drop zone
    bindDropZoneEvents(dropZone, input);
    
    return dropZone;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª–µ
 */
function getFieldInfo(input) {
    const accept = input.getAttribute('accept') || '';
    
    if (accept.includes('image/')) {
        return {
            icon: 'fas fa-image',
            types: 'JPG, PNG, GIF',
            maxSize: '1500 –ú–ë'
        };
    } else if (accept.includes('application/pdf')) {
        return {
            icon: 'fas fa-file-pdf',
            types: 'PDF',
            maxSize: '1500 –ú–ë'
        };
    } else if (accept.includes('.dwg') || accept.includes('.pln')) {
        return {
            icon: 'fas fa-drafting-compass',
            types: 'DWG, PLN',
            maxSize: '1500 –ú–ë'
        };
    } else {
        return {
            icon: 'fas fa-file-upload',
            types: '–õ—é–±—ã–µ —Ñ–∞–π–ª—ã',
            maxSize: '1500 –ú–ë'
        };
    }
}

/**
 * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ drop zone
 */
function bindDropZoneEvents(dropZone, input) {
    const dropArea = dropZone.querySelector('.drop-area');
    const dropLink = dropZone.querySelector('.drop-link');
    
    // Drag & Drop —Å–æ–±—ã—Ç–∏—è
    dropArea.addEventListener('dragenter', (e) => handleDragEnter(e, dropZone));
    dropArea.addEventListener('dragover', (e) => handleDragOver(e, dropZone));
    dropArea.addEventListener('dragleave', (e) => handleDragLeave(e, dropZone));
    dropArea.addEventListener('drop', (e) => handleDrop(e, dropZone, input));
    
    // –ö–ª–∏–∫ –ø–æ –≤—Å–µ–π –æ–±–ª–∞—Å—Ç–∏ drop area
    dropArea.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ drop area, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞');
        input.click();
    });
    
    // –ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ "–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞"
    if (dropLink) {
        dropLink.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞');
            input.click();
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const removeBtn = dropZone.querySelector('.file-remove');
    if (removeBtn) {
        removeBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            removeFile(dropZone, input);
        });
    }
}

/**
 * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ file input
 */
function bindFileInputEvents(input) {
    // –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    input.addEventListener('change', (e) => {
        const dropZone = input.nextElementSibling;
        if (e.target.files.length > 0) {
            const file = e.target.files[0];
            handleFileSelection(dropZone, input, file);
        } else {
            // –§–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω
            showDropArea(dropZone);
        }
    });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ drag enter
 */
function handleDragEnter(e, dropZone) {
    e.preventDefault();
    e.stopPropagation();
    dragCounter++;
    dropZone.classList.add('dragover');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ drag over
 */
function handleDragOver(e, dropZone) {
    e.preventDefault();
    e.stopPropagation();
    dropZone.classList.add('dragover');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ drag leave
 */
function handleDragLeave(e, dropZone) {
    e.preventDefault();
    e.stopPropagation();
    dragCounter--;
    if (dragCounter === 0) {
        dropZone.classList.remove('dragover');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ drop
 */
function handleDrop(e, dropZone, input) {
    e.preventDefault();
    e.stopPropagation();
    
    dragCounter = 0;
    dropZone.classList.remove('dragover');
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
        const file = files[0];
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataTransfer –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        input.files = dataTransfer.files;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        handleFileSelection(dropZone, input, file);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ change –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const changeEvent = new Event('change', { bubbles: true });
        input.dispatchEvent(changeEvent);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
 */
function handleFileSelection(dropZone, input, file) {
    console.log('üìÅ –§–∞–π–ª –≤—ã–±—Ä–∞–Ω:', file.name);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    const validation = validateFile(file, input);
    if (!validation.valid) {
        showError(dropZone, validation.message);
        input.value = '';
        return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    hideError(dropZone);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    showFileInfo(dropZone, file);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    simulateUpload(dropZone);
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
 */
function validateFile(file, input) {
    const accept = input.getAttribute('accept');
    const maxSize = 1500 * 1024 * 1024; // 1500 –ú–ë
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if (file.size > maxSize) {
        return {
            valid: false,
            message: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 1500 –ú–ë'
        };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (accept && !isFileTypeAllowed(file, accept)) {
        return {
            valid: false,
            message: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã: ${accept}`
        };
    }
    
    return { valid: true };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
 */
function isFileTypeAllowed(file, accept) {
    const acceptTypes = accept.split(',').map(type => type.trim());
    
    return acceptTypes.some(type => {
        if (type.startsWith('.')) {
            return file.name.toLowerCase().endsWith(type.toLowerCase());
        } else {
            return file.type.startsWith(type.replace('*', ''));
        }
    });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
 */
function showFileInfo(dropZone, file) {
    const dropArea = dropZone.querySelector('.drop-area');
    const fileInfo = dropZone.querySelector('.file-info');
    const icon = getFileIcon(file);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const iconElement = fileInfo.querySelector('.file-info-icon i');
    const nameElement = fileInfo.querySelector('.file-info-name');
    const sizeElement = fileInfo.querySelector('.file-info-size');
    
    iconElement.className = icon;
    nameElement.textContent = file.name;
    nameElement.title = file.name;
    sizeElement.textContent = formatFileSize(file.size);
    
    // –°–∫—Ä—ã–≤–∞–µ–º drop area –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º file info
    dropArea.style.display = 'none';
    fileInfo.classList.add('show');
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å drop area
 */
function showDropArea(dropZone) {
    const dropArea = dropZone.querySelector('.drop-area');
    const fileInfo = dropZone.querySelector('.file-info');
    const progress = dropZone.querySelector('.upload-progress');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º drop area –∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    dropArea.style.display = 'flex';
    fileInfo.classList.remove('show');
    progress.classList.remove('show');
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
 */
function removeFile(dropZone, input) {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞');
    
    // –û—á–∏—â–∞–µ–º input
    input.value = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º drop area
    showDropArea(dropZone);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    hideError(dropZone);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ change
    const changeEvent = new Event('change', { bubbles: true });
    input.dispatchEvent(changeEvent);
}

/**
 * –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
 */
function simulateUpload(dropZone) {
    const progress = dropZone.querySelector('.upload-progress');
    const progressFill = dropZone.querySelector('.progress-fill');
    const progressText = dropZone.querySelector('.progress-text');
    
    progress.classList.add('show');
    
    let currentProgress = 0;
    const interval = setInterval(() => {
        currentProgress += Math.random() * 15;
        if (currentProgress >= 100) {
            currentProgress = 100;
            clearInterval(interval);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                progress.classList.remove('show');
            }, 1000);
        }
        
        progressFill.style.width = currentProgress + '%';
        progressText.textContent = Math.round(currentProgress) + '%';
    }, 200);
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
 */
function showError(dropZone, message) {
    const errorElement = dropZone.querySelector('.error-message');
    errorElement.textContent = message;
    errorElement.style.display = 'block';
    dropZone.classList.add('error');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        hideError(dropZone);
    }, 5000);
}

/**
 * –°–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É
 */
function hideError(dropZone) {
    const errorElement = dropZone.querySelector('.error-message');
    errorElement.style.display = 'none';
    errorElement.textContent = '';
    dropZone.classList.remove('error');
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ñ–∞–π–ª–∞
 */
function getFileIcon(file) {
    const ext = file.name.split('.').pop().toLowerCase();
    const type = file.type;
    
    if (type.startsWith('image/')) {
        return 'fas fa-file-image';
    } else if (type === 'application/pdf') {
        return 'fas fa-file-pdf';
    } else if (['doc', 'docx'].includes(ext)) {
        return 'fas fa-file-word';
    } else if (['xls', 'xlsx'].includes(ext)) {
        return 'fas fa-file-excel';
    } else if (['dwg', 'pln'].includes(ext)) {
        return 'fas fa-drafting-compass';
    } else if (['zip', 'rar', '7z'].includes(ext)) {
        return 'fas fa-file-archive';
    } else {
        return 'fas fa-file';
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
 */
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
 */
function preventDefaults() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ drag & drop –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        document.addEventListener(eventName, (e) => {
            // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—à–∏—Ö drop zone
            if (!e.target.closest('.file-drop-zone')) {
                e.preventDefault();
                e.stopPropagation();
            }
        }, false);
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document.addEventListener('dragleave', (e) => {
        if (e.clientX === 0 && e.clientY === 0) {
            dragCounter = 0;
        }
    });
}

/**
 * –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
function reinitializeDragDrop() {
    initDragDropFileUpload();
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
 */
document.addEventListener('DOMContentLoaded', () => {
    initDragDropFileUpload();
    
    // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM –¥–ª—è –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
    const observer = new MutationObserver((mutations) => {
        let needsReinit = false;
        
        mutations.forEach((mutation) => {
            mutation.addedNodes.forEach((node) => {
                if (node.nodeType === 1) { // Element node
                    const fileInputs = node.querySelectorAll ? 
                        node.querySelectorAll('input[type="file"]:not([data-drag-drop-initialized])') : [];
                    
                    if (fileInputs.length > 0) {
                        needsReinit = true;
                    }
                }
            });
        });
        
        if (needsReinit) {
            console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –ø–æ–ª—è, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
            initDragDropFileUpload();
        }
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
    
    console.log('‚úÖ Drag & Drop —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.DragDropFileUpload = {
    init: initDragDropFileUpload,
    reinit: reinitializeDragDrop,
    test: function() {
        console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DRAG & DROP –°–ò–°–¢–ï–ú–´');
        console.log('=================================');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ file inputs
        const allFileInputs = document.querySelectorAll('input[type="file"]');
        const initializedInputs = document.querySelectorAll('input[type="file"][data-drag-drop-initialized="true"]');
        const dropZones = document.querySelectorAll('.file-drop-zone');
        
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π: ${allFileInputs.length}`);
        console.log(`   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${initializedInputs.length}`);
        console.log(`   Drop zone —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${dropZones.length}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
        allFileInputs.forEach((input, index) => {
            const isInitialized = input.hasAttribute('data-drag-drop-initialized');
            const hasDropZone = input.nextElementSibling && input.nextElementSibling.classList.contains('file-drop-zone');
            
            console.log(`${index + 1}. ${input.id || input.name}:`);
            console.log(`   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${isInitialized ? '‚úÖ' : '‚ùå'}`);
            console.log(`   –ï—Å—Ç—å drop zone: ${hasDropZone ? '‚úÖ' : '‚ùå'}`);
            console.log(`   Display: ${input.style.display}`);
        });
        
        return {
            total: allFileInputs.length,
            initialized: initializedInputs.length,
            dropZones: dropZones.length
        };
    }
};
