/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (storage)
 * –ó–∞–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
 * –í–µ—Ä—Å–∏—è: 1.0
 */

class LocalDocumentsUploader {
    constructor() {
        this.uploadInProgress = false;
        this.maxFileSize = 100 * 1024 * 1024; // 100MB
        this.allowedTypes = [
            'pdf', 'doc', 'docx', 'xls', 'xlsx', 
            'jpg', 'jpeg', 'png', 'zip', 'rar',
            'txt', 'rtf', 'odt', 'ods'
        ];
        
        this.init();
    }
    
    init() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
        this.bindEvents();
    }
    
    bindEvents() {
        const uploadBtn = document.getElementById('uploadDocumentsBtn');
        const uploadInput = document.getElementById('documentUploadInput');
        const uploadArea = document.getElementById('documentsUploadArea');
        
        if (!uploadBtn || !uploadInput || !uploadArea) {
            console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
            return;
        }
        
        // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        uploadBtn.addEventListener('click', () => {
            uploadInput.click();
        });
        
        // –ö–ª–∏–∫ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        uploadArea.addEventListener('click', () => {
            uploadInput.click();
        });
        
        // –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤
        uploadInput.addEventListener('change', (e) => {
            const files = e.target.files;
            if (files.length > 0) {
                this.handleFileSelection(files);
            }
        });
        
        // Drag & Drop
        this.setupDragAndDrop(uploadArea, uploadInput);
    }
    
    setupDragAndDrop(uploadArea, uploadInput) {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, this.preventDefaults, false);
            document.body.addEventListener(eventName, this.preventDefaults, false);
        });
        
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
        ['dragenter', 'dragover'].forEach(eventName => {
            uploadArea.addEventListener(eventName, () => {
                uploadArea.classList.add('drag-over');
            }, false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, () => {
                uploadArea.classList.remove('drag-over');
            }, false);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∞–π–ª–æ–≤
        uploadArea.addEventListener('drop', (e) => {
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                this.handleFileSelection(files);
            }
        }, false);
    }
    
    preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    
    handleFileSelection(files) {
        console.log(`üìÅ –í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
        const validationResult = this.validateFiles(files);
        if (!validationResult.valid) {
            this.showNotification(validationResult.message, 'error');
            return;
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        this.displaySelectedFiles(files);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        this.uploadFiles(files);
    }
    
    validateFiles(files) {
        const errors = [];
        
        Array.from(files).forEach((file, index) => {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            if (file.size > this.maxFileSize) {
                errors.push(`–§–∞–π–ª "${file.name}" –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (100MB)`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
            const extension = file.name.split('.').pop().toLowerCase();
            if (!this.allowedTypes.includes(extension)) {
                errors.push(`–§–∞–π–ª "${file.name}" –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç`);
            }
        });
        
        return {
            valid: errors.length === 0,
            message: errors.join('\n')
        };
    }
    
    displaySelectedFiles(files) {
        const filesCountInfo = document.getElementById('filesCountInfo');
        const filesCountText = document.getElementById('filesCountText');
        const selectedFilesList = document.getElementById('selectedFilesList');
        
        if (!filesCountInfo || !filesCountText) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ–∞–π–ª–æ–≤
        const count = files.length;
        const word = this.getFileWord(count);
        const totalSize = Array.from(files).reduce((sum, file) => sum + file.size, 0);
        
        filesCountText.textContent = `–í—ã–±—Ä–∞–Ω–æ ${count} ${word} (${this.formatFileSize(totalSize)})`;
        filesCountInfo.style.display = 'block';
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        if (selectedFilesList) {
            selectedFilesList.innerHTML = '';
            Array.from(files).forEach((file, index) => {
                const fileElement = this.createFileElement(file, index);
                selectedFilesList.appendChild(fileElement);
            });
        }
    }
    
    createFileElement(file, index) {
        const fileElement = document.createElement('div');
        fileElement.className = 'selected-file-item d-flex justify-content-between align-items-center py-2 px-3 mb-2 border rounded';
        
        fileElement.innerHTML = `
            <div class="file-info">
                <i class="fas ${this.getFileIcon(file.name)} me-2 text-primary"></i>
                <span class="file-name">${file.name}</span>
                <small class="text-muted ms-2">(${this.formatFileSize(file.size)})</small>
            </div>
            <div class="file-status">
                <span class="badge bg-secondary">–ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ</span>
            </div>
        `;
        
        return fileElement;
    }
    
    async uploadFiles(files) {
        if (this.uploadInProgress) {
            this.showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', 'warning');
            return;
        }
        
        this.uploadInProgress = true;
        this.updateUploadButton(true);
        
        try {
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
            
            // –°–æ–∑–¥–∞–µ–º FormData
            const formData = new FormData();
            formData.append('_token', this.getCsrfToken());
            formData.append('deal_id', this.getDealId());
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            Array.from(files).forEach((file, index) => {
                formData.append('documents[]', file);
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ñ–∞–π–ª–æ–≤
            this.updateFileStatuses('–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            const response = await fetch(`/deal/${this.getDealId()}/upload-documents`, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            
            if (result.success) {
                console.log('‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', result);
                this.updateFileStatuses('–ó–∞–≥—Ä—É–∂–µ–Ω–æ', 'success');
                this.showNotification(result.message || '–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                setTimeout(() => {
                    this.refreshDocumentsList(result.documents);
                    this.clearSelectedFiles();
                }, 1500);
                
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            this.updateFileStatuses('–û—à–∏–±–∫–∞', 'error');
            this.showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, 'error');
        } finally {
            this.uploadInProgress = false;
            this.updateUploadButton(false);
        }
    }
    
    updateFileStatuses(status, type = 'info') {
        const statusElements = document.querySelectorAll('.file-status .badge');
        const statusClass = type === 'success' ? 'bg-success' : 
                           type === 'error' ? 'bg-danger' : 'bg-info';
        
        statusElements.forEach(element => {
            element.className = `badge ${statusClass}`;
            element.textContent = status;
        });
    }
    
    updateUploadButton(loading) {
        const uploadBtn = document.getElementById('uploadDocumentsBtn');
        const btnText = uploadBtn?.querySelector('.upload-btn-text');
        const btnIcon = uploadBtn?.querySelector('i');
        
        if (!uploadBtn) return;
        
        if (loading) {
            uploadBtn.disabled = true;
            if (btnText) btnText.textContent = '–ó–∞–≥—Ä—É–∂–∞–µ–º...';
            if (btnIcon) btnIcon.className = 'fas fa-spinner fa-spin me-2';
        } else {
            uploadBtn.disabled = false;
            if (btnText) btnText.textContent = '–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã';
            if (btnIcon) btnIcon.className = 'fas fa-plus me-2';
        }
    }
    
    clearSelectedFiles() {
        const uploadInput = document.getElementById('documentUploadInput');
        const filesCountInfo = document.getElementById('filesCountInfo');
        const selectedFilesList = document.getElementById('selectedFilesList');
        
        if (uploadInput) uploadInput.value = '';
        if (filesCountInfo) filesCountInfo.style.display = 'none';
        if (selectedFilesList) selectedFilesList.innerHTML = '';
    }
    
    refreshDocumentsList(documents) {
        // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            location.reload();
        }, 1000);
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getCsrfToken() {
        return document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
    }
    
    getDealId() {
        const url = window.location.pathname;
        const matches = url.match(/\/deal\/(\d+)/);
        return matches ? matches[1] : null;
    }
    
    getFileWord(count) {
        if (count === 1) return '—Ñ–∞–π–ª';
        if (count >= 2 && count <= 4) return '—Ñ–∞–π–ª–∞';
        return '—Ñ–∞–π–ª–æ–≤';
    }
    
    formatFileSize(bytes) {
        if (bytes === 0) return '0 –ë–∞–π—Ç';
        const k = 1024;
        const sizes = ['–ë–∞–π—Ç', '–ö–ë', '–ú–ë', '–ì–ë'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    getFileIcon(filename) {
        const extension = filename.split('.').pop().toLowerCase();
        
        switch (extension) {
            case 'pdf': return 'fa-file-pdf';
            case 'doc':
            case 'docx': return 'fa-file-word';
            case 'xls':
            case 'xlsx': return 'fa-file-excel';
            case 'jpg':
            case 'jpeg':
            case 'png': return 'fa-file-image';
            case 'zip':
            case 'rar': return 'fa-file-archive';
            case 'txt': return 'fa-file-alt';
            default: return 'fa-file';
        }
    }
    
    showNotification(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        console.log(`${type.toUpperCase()}: ${message}`);
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `alert alert-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} alert-dismissible fade show position-fixed`;
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    if (document.getElementById('documentsUploadArea')) {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
        new LocalDocumentsUploader();
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.LocalDocumentsUploader = LocalDocumentsUploader;
