/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è —Å–¥–µ–ª–æ–∫
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–ª–∏–∫–æ–º –ø–æ –ø–æ–ª—è–º –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º
 */

class ImprovedDocumentsModule {
    constructor() {
        this.uploadInProgress = false;
        this.supportedFormats = {
            'contract_file': ['.pdf', '.doc', '.docx'],
            'technical_task': ['.pdf', '.doc', '.docx'],
            'project_estimate': ['.pdf', '.doc', '.docx', '.xls', '.xlsx'],
            'blueprints': ['.pdf', '.dwg', '.jpg', '.jpeg', '.png', '.zip'],
            'models_3d': ['.3ds', '.max', '.obj', '.fbx', '.blend', '.zip', '.rar'],
            'presentation': ['.pdf', '.ppt', '.pptx', '.jpg', '.jpeg', '.png', '.zip'],
            'reference_materials': ['.pdf', '.doc', '.docx', '.jpg', '.jpeg', '.png', '.zip', '.rar'],
            'client_correspondence': ['.pdf', '.doc', '.docx', '.txt', '.jpg', '.jpeg', '.png', '.zip'],
            'other_documents': ['*']
        };
        
        this.maxFileSizes = {
            'contract_file': 1500 * 1024 * 1024, // 1500MB
            'technical_task': 1500 * 1024 * 1024, // 1500MB
            'project_estimate': 1500 * 1024 * 1024, // 1500MB
            'blueprints': 1500 * 1024 * 1024, // 1500MB
            'models_3d': 1500 * 1024 * 1024, // 1500MB
            'presentation': 1500 * 1024 * 1024, // 1500MB
            'reference_materials': 1500 * 1024 * 1024, // 1500MB
            'client_correspondence': 1500 * 1024 * 1024, // 1500MB
            'other_documents': 1500 * 1024 * 1024 // 1500MB
        };
        
        this.init();
    }
    
    init() {
        console.log('üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
        this.fixClickHandlers();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag & drop
        this.initDragAndDrop();
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ —Å–∏—Å—Ç–µ–º–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        this.connectToYandexDisk();
        
        console.log('‚úÖ –ú–æ–¥—É–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    fixClickHandlers() {
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–æ–≤');
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        const uploadButtons = document.querySelectorAll('[onclick*="uploadFile"]');
        uploadButtons.forEach(button => {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π onclick
            button.removeAttribute('onclick');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            const fieldName = this.extractFieldName(button);
            if (fieldName) {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    this.triggerFileUpload(fieldName);
                });
            }
        });
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–º–µ–Ω—ã —Ñ–∞–π–ª–∞
        const replaceButtons = document.querySelectorAll('[onclick*="replaceFile"]');
        replaceButtons.forEach(button => {
            button.removeAttribute('onclick');
            
            const fieldName = this.extractFieldName(button);
            if (fieldName) {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    this.triggerFileUpload(fieldName);
                });
            }
        });
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        const deleteButtons = document.querySelectorAll('[onclick*="deleteFile"]');
        deleteButtons.forEach(button => {
            button.removeAttribute('onclick');
            
            const fieldName = this.extractFieldName(button);
            if (fieldName) {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    this.deleteFile(fieldName);
                });
            }
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º file input –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const fileInputs = document.querySelectorAll('.file-input');
        fileInputs.forEach(input => {
            input.addEventListener('change', (e) => {
                this.handleFileSelection(e.target);
            });
        });
    }
    
    extractFieldName(button) {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        const row = button.closest('.document-row');
        if (row) {
            return row.dataset.field;
        }
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
        const onclick = button.getAttribute('onclick');
        if (onclick) {
            const match = onclick.match(/['"]([\w_]+)['"]/);
            return match ? match[1] : null;
        }
        
        return null;
    }
    
    triggerFileUpload(fieldName) {
        console.log('üìé –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—è:', fieldName);
        
        if (this.uploadInProgress) {
            alert('–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏');
            return;
        }
        
        const fileInput = document.getElementById(fieldName);
        if (fileInput) {
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä
            fileInput.value = '';
            
            // –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –∫–ª–∏–∫–∞–µ–º –Ω–∞ input
            fileInput.click();
        } else {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª–æ–≤—ã–π input –¥–ª—è –ø–æ–ª—è:', fieldName);
            this.createFileInput(fieldName);
        }
    }
    
    createFileInput(fieldName) {
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ input –¥–ª—è –ø–æ–ª—è:', fieldName);
        
        const input = document.createElement('input');
        input.type = 'file';
        input.id = fieldName;
        input.name = fieldName;
        input.className = 'file-input d-none';
        input.dataset.field = fieldName;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º accept
        if (this.supportedFormats[fieldName]) {
            const formats = this.supportedFormats[fieldName];
            if (formats[0] !== '*') {
                input.accept = formats.join(',');
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        input.addEventListener('change', (e) => {
            this.handleFileSelection(e.target);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
        const row = document.querySelector(`[data-field="${fieldName}"]`);
        if (row) {
            const actionsCell = row.querySelector('.document-actions');
            if (actionsCell) {
                actionsCell.appendChild(input);
            }
        }
        
        // –°—Ä–∞–∑—É –∫–ª–∏–∫–∞–µ–º
        input.click();
    }
    
    handleFileSelection(input) {
        const file = input.files[0];
        if (!file) return;
        
        const fieldName = input.dataset.field;
        console.log('üìÑ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:', file.name, '–¥–ª—è –ø–æ–ª—è:', fieldName);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        if (!this.validateFile(file, fieldName)) {
            input.value = '';
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        this.showUploadProgress(fieldName);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        this.uploadToYandexDisk(fieldName, file);
    }
    
    validateFile(file, fieldName) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        const maxSize = this.maxFileSizes[fieldName] || 1500 * 1024 * 1024;
        if (file.size > maxSize) {
            const maxSizeMB = Math.round(maxSize / (1024 * 1024));
            alert(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${maxSizeMB}MB`);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        const supportedFormats = this.supportedFormats[fieldName];
        if (supportedFormats && supportedFormats[0] !== '*') {
            const fileName = file.name.toLowerCase();
            const isSupported = supportedFormats.some(format => 
                fileName.endsWith(format.replace('.', ''))
            );
            
            if (!isSupported) {
                alert(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${supportedFormats.join(', ')}`);
                return false;
            }
        }
        
        return true;
    }
    
    showUploadProgress(fieldName) {
        console.log('‚è≥ –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è:', fieldName);
        
        this.uploadInProgress = true;
        
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        let progressContainer = document.querySelector('.upload-progress-container');
        if (!progressContainer) {
            progressContainer = this.createProgressContainer();
        }
        
        progressContainer.classList.remove('d-none');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        const statusText = progressContainer.querySelector('.upload-status');
        if (statusText) {
            statusText.textContent = `–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${this.getFieldDisplayName(fieldName)}`;
        }
        
        // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        const progressBar = progressContainer.querySelector('.progress-bar');
        if (progressBar) {
            progressBar.style.width = '0%';
        }
    }
    
    createProgressContainer() {
        const container = document.createElement('div');
        container.className = 'upload-progress-container';
        container.innerHTML = `
            <div class="card mt-3">
                <div class="card-body">
                    <h6><i class="fas fa-upload me-2"></i>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞</h6>
                    <div class="progress">
                        <div class="progress-bar bg-primary" role="progressbar" style="width: 0%"></div>
                    </div>
                    <div class="mt-2">
                        <small class="text-muted upload-status">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...</small>
                    </div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        const tableContainer = document.querySelector('.documents-table-container');
        if (tableContainer) {
            tableContainer.parentNode.insertBefore(container, tableContainer.nextSibling);
        }
        
        return container;
    }
    
    hideUploadProgress() {
        this.uploadInProgress = false;
        
        const progressContainer = document.querySelector('.upload-progress-container');
        if (progressContainer) {
            progressContainer.classList.add('d-none');
        }
    }
    
    updateUploadProgress(percentage, status) {
        const progressBar = document.querySelector('.progress-bar');
        const statusText = document.querySelector('.upload-status');
        
        if (progressBar) {
            progressBar.style.width = percentage + '%';
            progressBar.setAttribute('aria-valuenow', percentage);
        }
        
        if (statusText && status) {
            statusText.textContent = status;
        }
    }
    
    uploadToYandexDisk(fieldName, file) {
        console.log('‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:', fieldName, file.name);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        if (!window.YandexDiskUploaderV3 || !window.yandexUploaderV3) {
            console.warn('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É');
            this.uploadStandard(fieldName, file);
            return;
        }
        
        const uploader = window.yandexUploaderV3;
        
        uploader.uploadFile(file, fieldName, {
            onProgress: (percentage) => {
                this.updateUploadProgress(percentage, `–ó–∞–≥—Ä—É–∑–∫–∞: ${percentage}%`);
            },
            onSuccess: (response) => {
                console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', response);
                this.handleUploadSuccess(fieldName, response.url || response.downloadUrl, file.name);
            },
            onError: (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:', error);
                this.handleUploadError(fieldName, error);
            }
        });
    }
    
    uploadStandard(fieldName, file) {
        console.log('üì§ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞:', fieldName);
        
        const formData = new FormData();
        formData.append(fieldName, file);
        formData.append('_token', document.querySelector('meta[name="csrf-token"]').content);
        
        const dealId = this.getDealId();
        if (dealId) {
            formData.append('deal_id', dealId);
        }
        
        const xhr = new XMLHttpRequest();
        
        xhr.upload.addEventListener('progress', (e) => {
            if (e.lengthComputable) {
                const percentage = Math.round((e.loaded / e.total) * 100);
                this.updateUploadProgress(percentage, `–ó–∞–≥—Ä—É–∑–∫–∞: ${percentage}%`);
            }
        });
        
        xhr.addEventListener('load', () => {
            if (xhr.status === 200) {
                try {
                    const response = JSON.parse(xhr.responseText);
                    if (response.success) {
                        this.handleUploadSuccess(fieldName, response.url, file.name);
                    } else {
                        this.handleUploadError(fieldName, new Error(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'));
                    }
                } catch (e) {
                    this.handleUploadError(fieldName, new Error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞'));
                }
            } else {
                this.handleUploadError(fieldName, new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${xhr.status}`));
            }
        });
        
        xhr.addEventListener('error', () => {
            this.handleUploadError(fieldName, new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'));
        });
        
        xhr.open('POST', '/deals/upload-document');
        xhr.send(formData);
    }
    
    handleUploadSuccess(fieldName, fileUrl, fileName) {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:', fieldName, fileUrl);
        
        this.hideUploadProgress();
        this.updateDocumentRow(fieldName, fileUrl, fileName);
        this.saveDocumentToForm(fieldName, fileUrl);
        this.updateDocumentsCounter();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!', 'success');
    }
    
    handleUploadError(fieldName, error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', fieldName, error);
        
        this.hideUploadProgress();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message, 'danger');
    }
    
    updateDocumentRow(fieldName, fileUrl, fileName) {
        const row = document.querySelector(`[data-field="${fieldName}"]`);
        if (!row) return;
        
        const statusCell = row.querySelector('.file-status');
        const actionsCell = row.querySelector('.document-actions');
        
        if (statusCell) {
            statusCell.innerHTML = `
                <div class="file-status uploaded">
                    <i class="fas fa-check-circle text-success me-1"></i>
                    <span class="text-success">–ó–∞–≥—Ä—É–∂–µ–Ω</span>
                    <br><small class="text-muted">${fileName}</small>
                </div>
            `;
        }
        
        if (actionsCell) {
            const newHTML = `
                <div class="document-actions">
                    <a href="${fileUrl}" target="_blank" 
                       class="btn btn-sm btn-outline-primary me-1">
                        <i class="fas fa-eye"></i>
                    </a>
                    <button type="button" class="btn btn-sm btn-outline-secondary me-1">
                        <i class="fas fa-upload"></i>
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-danger">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
                <input type="file" 
                       class="file-input d-none" 
                       id="${fieldName}" 
                       name="${fieldName}" 
                       data-field="${fieldName}">
            `;
            
            actionsCell.innerHTML = newHTML;
            
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
            this.initRowHandlers(actionsCell, fieldName);
        }
    }
    
    initRowHandlers(container, fieldName) {
        const replaceBtn = container.querySelector('.btn-outline-secondary');
        const deleteBtn = container.querySelector('.btn-outline-danger');
        const fileInput = container.querySelector('.file-input');
        
        if (replaceBtn) {
            replaceBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.triggerFileUpload(fieldName);
            });
        }
        
        if (deleteBtn) {
            deleteBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.deleteFile(fieldName);
            });
        }
        
        if (fileInput) {
            fileInput.addEventListener('change', (e) => {
                this.handleFileSelection(e.target);
            });
        }
    }
    
    deleteFile(fieldName) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª?')) {
            return;
        }
        
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:', fieldName);
        
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        
        const row = document.querySelector(`[data-field="${fieldName}"]`);
        if (!row) return;
        
        const statusCell = row.querySelector('.file-status');
        const actionsCell = row.querySelector('.document-actions');
        
        if (statusCell) {
            statusCell.innerHTML = `
                <div class="file-status not-uploaded">
                    <i class="fas fa-times-circle text-danger me-1"></i>
                    <span class="text-danger">–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω</span>
                </div>
            `;
        }
        
        if (actionsCell) {
            const newHTML = `
                <div class="document-actions">
                    <button type="button" class="btn btn-sm btn-primary">
                        <i class="fas fa-upload me-1"></i>–ó–∞–≥—Ä—É–∑–∏—Ç—å
                    </button>
                </div>
                <input type="file" 
                       class="file-input d-none" 
                       id="${fieldName}" 
                       name="${fieldName}" 
                       data-field="${fieldName}">
            `;
            
            actionsCell.innerHTML = newHTML;
            
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            this.initRowHandlers(actionsCell, fieldName);
        }
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Ñ–æ—Ä–º—ã
        this.removeDocumentFromForm(fieldName);
        this.updateDocumentsCounter();
        
        this.showNotification('–§–∞–π–ª —É–¥–∞–ª–µ–Ω', 'info');
    }
    
    saveDocumentToForm(fieldName, fileUrl) {
        const form = document.getElementById('deal-edit-form');
        if (!form) return;
        
        let hiddenInput = form.querySelector(`input[name="${fieldName}_url"]`);
        if (!hiddenInput) {
            hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = fieldName + '_url';
            form.appendChild(hiddenInput);
        }
        
        hiddenInput.value = fileUrl;
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–æ—Ä–º—É:', fieldName + '_url', '=', fileUrl);
    }
    
    removeDocumentFromForm(fieldName) {
        const form = document.getElementById('deal-edit-form');
        if (!form) return;
        
        const hiddenInput = form.querySelector(`input[name="${fieldName}_url"]`);
        if (hiddenInput) {
            hiddenInput.remove();
        }
    }
    
    updateDocumentsCounter() {
        const uploadedRows = document.querySelectorAll('.file-status.uploaded').length;
        const totalRows = document.querySelectorAll('.document-row').length;
        const badge = document.querySelector('.documents-stats .badge');
        
        if (badge) {
            badge.textContent = `${uploadedRows}/${totalRows} –∑–∞–≥—Ä—É–∂–µ–Ω–æ`;
        }
    }
    
    getDealId() {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID —Å–¥–µ–ª–∫–∏ –∏–∑ URL –∏–ª–∏ —Ñ–æ—Ä–º—ã
        const url = window.location.pathname;
        const match = url.match(/deal\/(\d+)/);
        if (match) {
            return match[1];
        }
        
        const form = document.getElementById('deal-edit-form');
        if (form) {
            const dealIdInput = form.querySelector('input[name="deal_id"]');
            if (dealIdInput) {
                return dealIdInput.value;
            }
        }
        
        return null;
    }
    
    getFieldDisplayName(fieldName) {
        const names = {
            'contract_file': '–î–æ–≥–æ–≤–æ—Ä',
            'technical_task': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
            'project_estimate': '–°–º–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞',
            'blueprints': '–ß–µ—Ä—Ç–µ–∂–∏',
            'models_3d': '3D –º–æ–¥–µ–ª–∏',
            'presentation': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
            'reference_materials': '–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            'client_correspondence': '–ü–µ—Ä–µ–ø–∏—Å–∫–∞',
            'other_documents': '–ü—Ä–æ—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
        };
        
        return names[fieldName] || fieldName;
    }
    
    showNotification(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notification = document.createElement('div');
        notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" aria-label="Close"></button>
        `;
        
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = notification.querySelector('.btn-close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                notification.remove();
            });
        }
    }
    
    initDragAndDrop() {
        console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Drag & Drop');
        
        const table = document.querySelector('.documents-table tbody');
        if (!table) return;
        
        table.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.stopPropagation();
            table.classList.add('drag-over');
        });
        
        table.addEventListener('dragleave', (e) => {
            e.preventDefault();
            e.stopPropagation();
            table.classList.remove('drag-over');
        });
        
        table.addEventListener('drop', (e) => {
            e.preventDefault();
            e.stopPropagation();
            table.classList.remove('drag-over');
            
            const files = Array.from(e.dataTransfer.files);
            if (files.length > 0) {
                this.handleDragAndDropFiles(files);
            }
        });
    }
    
    handleDragAndDropFiles(files) {
        console.log('üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ D&D —Ñ–∞–π–ª–æ–≤:', files.length);
        
        if (files.length === 1) {
            // –û–¥–∏–Ω —Ñ–∞–π–ª - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
            this.showFileTypeModal(files[0]);
        } else {
            // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
            files.forEach(file => {
                const fieldName = this.detectFileType(file);
                if (fieldName) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
                    const row = document.querySelector(`[data-field="${fieldName}"]`);
                    const isUploaded = row && row.querySelector('.file-status.uploaded');
                    
                    if (!isUploaded) {
                        this.uploadFileToField(fieldName, file);
                    }
                }
            });
        }
    }
    
    detectFileType(file) {
        const fileName = file.name.toLowerCase();
        
        if (fileName.includes('contract') || fileName.includes('–¥–æ–≥–æ–≤–æ—Ä')) {
            return 'contract_file';
        }
        if (fileName.includes('technical') || fileName.includes('—Ç–∑') || fileName.includes('—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ')) {
            return 'technical_task';
        }
        if (fileName.includes('estimate') || fileName.includes('—Å–º–µ—Ç–∞')) {
            return 'project_estimate';
        }
        if (fileName.includes('blueprint') || fileName.includes('—á–µ—Ä—Ç–µ–∂') || fileName.includes('–ø–ª–∞–Ω')) {
            return 'blueprints';
        }
        if (fileName.includes('3d') || fileName.includes('model') || fileName.includes('–º–æ–¥–µ–ª—å')) {
            return 'models_3d';
        }
        if (fileName.includes('presentation') || fileName.includes('–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è')) {
            return 'presentation';
        }
        if (fileName.includes('reference') || fileName.includes('—Å–ø—Ä–∞–≤–æ—á–Ω')) {
            return 'reference_materials';
        }
        if (fileName.includes('correspondence') || fileName.includes('–ø–µ—Ä–µ–ø–∏—Å–∫–∞') || fileName.includes('chat')) {
            return 'client_correspondence';
        }
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–æ—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        return 'other_documents';
    }
    
    showFileTypeModal(file) {
        // –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        const modal = document.createElement('div');
        modal.className = 'modal fade show';
        modal.style.display = 'block';
        modal.innerHTML = `
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <p>–§–∞–π–ª: <strong>${file.name}</strong></p>
                        <p>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:</p>
                        <select class="form-select" id="fileTypeSelect">
                            <option value="contract_file">–î–æ–≥–æ–≤–æ—Ä —Å –∫–ª–∏–µ–Ω—Ç–æ–º</option>
                            <option value="technical_task">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</option>
                            <option value="project_estimate">–°–º–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞</option>
                            <option value="blueprints">–ß–µ—Ä—Ç–µ–∂–∏ –∏ –ø–ª–∞–Ω—ã</option>
                            <option value="models_3d">3D –º–æ–¥–µ–ª–∏</option>
                            <option value="presentation">–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞</option>
                            <option value="reference_materials">–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</option>
                            <option value="client_correspondence">–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º</option>
                            <option value="other_documents">–ü—Ä–æ—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</option>
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                        <button type="button" class="btn btn-primary" id="uploadFileBtn">–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const closeBtn = modal.querySelector('.btn-close');
        const cancelBtn = modal.querySelector('.btn-secondary');
        const uploadBtn = modal.querySelector('#uploadFileBtn');
        const select = modal.querySelector('#fileTypeSelect');
        
        const closeModal = () => {
            modal.remove();
        };
        
        closeBtn.addEventListener('click', closeModal);
        cancelBtn.addEventListener('click', closeModal);
        
        uploadBtn.addEventListener('click', () => {
            const fieldName = select.value;
            this.uploadFileToField(fieldName, file);
            closeModal();
        });
        
        // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        const detectedType = this.detectFileType(file);
        if (detectedType) {
            select.value = detectedType;
        }
    }
    
    uploadFileToField(fieldName, file) {
        // –≠–º—É–ª–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º input
        const fileInput = document.getElementById(fieldName);
        if (fileInput) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π FileList
            const dt = new DataTransfer();
            dt.items.add(file);
            fileInput.files = dt.files;
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            this.handleFileSelection(fileInput);
        }
    }
    
    connectToYandexDisk() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        if (typeof window.YandexDiskUploaderV3 === 'undefined') {
            console.warn('‚ö†Ô∏è YandexDiskUploaderV3 –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const checkYandexReady = () => {
            if (window.yandexUploaderV3 && window.yandexUploaderV3.isInitialized) {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                return;
            }
            
            setTimeout(checkYandexReady, 500);
        };
        
        checkYandexReady();
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
    setTimeout(() => {
        window.improvedDocumentsModule = new ImprovedDocumentsModule();
    }, 1000);
});

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è Drag & Drop
const dragDropStyles = `
<style>
.documents-table.drag-over {
    background-color: #e3f2fd;
    border: 2px dashed #2196f3;
}

.documents-table tbody tr:hover {
    background-color: #f8f9fa;
}

.alert.position-fixed {
    animation: slideInRight 0.3s ease-out;
}

@keyframes slideInRight {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}
</style>
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ head
document.head.insertAdjacentHTML('beforeend', dragDropStyles);
