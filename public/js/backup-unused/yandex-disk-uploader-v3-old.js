/**
 * –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ v3.0
 * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ 2GB –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–∞—è —Å –Ω—É–ª—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 */
class YandexDiskUploaderV3 {
    constructor() {
        this.apiEndpoints = {
            upload: '/api/yandex-disk/upload',
            delete: '/api/yandex-disk/delete', 
            info: '/api/yandex-disk/info',
            health: '/api/yandex-disk/health'
        };
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        this.settings = {
            maxFileSize: 2 * 1024 * 1024 * 1024, // 2GB
            chunkSize: 2 * 1024 * 1024, // 2MB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            maxRetries: 3,
            retryDelay: 2000,
            timeout: 0, // –ë–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞
            supportedFields: [
                'measurements_file',
                'final_project_file', 
                'work_act',
                'chat_screenshot',
                'archicad_file',
                'execution_order_file',
                'final_floorplan',
                'final_collage',
                'contract_attachment',
                'screenshot_work_1',
                'screenshot_work_2',
                'screenshot_work_3',
                'screenshot_work_4',
                'screenshot_work_5'
            ]
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ–∫
        this.activeUploads = new Map();
        this.uploadProgress = new Map();
        this.isInitialized = false;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∑–∫–∏
     */
    init() {
        if (this.isInitialized) {
            console.log('üîÑ YandexDiskUploaderV3 —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YandexDiskUploaderV3...');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.attachEventHandlers();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        this.initializeExistingFields();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        this.checkServiceHealth();
        
        this.isInitialized = true;
        console.log('‚úÖ YandexDiskUploaderV3 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        $(document).on('change', 'input[type="file"]', (event) => {
            const input = event.target;
            const fieldName = this.extractFieldName(input);
            
            if (this.settings.supportedFields.includes(fieldName)) {
                console.log('üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—è:', fieldName);
                this.handleFileSelection(input);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        $(document).on('click', '.delete-yandex-file', (event) => {
            event.preventDefault();
            const button = $(event.target);
            const fieldName = button.data('field');
            const dealId = this.extractDealId();
            
            if (dealId && fieldName) {
                this.confirmAndDeleteFile(dealId, fieldName);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏
        $(document).on('click', '.cancel-upload', (event) => {
            event.preventDefault();
            const button = $(event.target);
            const fieldName = button.data('field');
            
            this.cancelUpload(fieldName);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        $(document).on('submit', '#update-deal-form', (event) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
            if (this.activeUploads.size > 0) {
                event.preventDefault();
                this.showNotification('–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤', 'warning');
                return false;
            }
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π —Ñ–∞–π–ª–æ–≤
     */
    initializeExistingFields() {
        this.settings.supportedFields.forEach(fieldName => {
            const input = $(`input[name="${fieldName}"]`);
            if (input.length > 0) {
                this.enhanceFileInput(input[0], fieldName);
                this.updateFileStatus(fieldName);
            }
        });
    }
    
    /**
     * –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
     */
    enhanceFileInput(input, fieldName) {
        const $input = $(input);
        const $container = $input.closest('.form-group-deal');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        if (!$container.find('.upload-status').length) {
            $container.append(`
                <div class="upload-status" id="upload-status-${fieldName}" style="display: none;">
                    <div class="progress-container">
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                        </div>
                        <div class="upload-info">
                            <span class="upload-text">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...</span>
                            <button type="button" class="btn btn-sm btn-outline-danger cancel-upload" data-field="${fieldName}">
                                ‚úï –û—Ç–º–µ–Ω–∏—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            `);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        if (!$container.find('.file-success').length) {
            $container.append(`
                <div class="file-success" id="file-success-${fieldName}" style="display: none;">
                    <div class="success-info">
                        <i class="fas fa-cloud-download-alt text-success"></i>
                        <a href="#" target="_blank" class="file-link">
                            <span class="file-name">–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω</span>
                        </a>
                        <button type="button" class="btn btn-sm btn-outline-danger delete-yandex-file" data-field="${fieldName}">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </div>
            `);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
     */
    async handleFileSelection(input) {
        const file = input.files[0];
        if (!file) return;
        
        const fieldName = this.extractFieldName(input);
        const dealId = this.extractDealId();
        
        console.log('üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:', {
            fileName: file.name,
            fileSize: this.formatBytes(file.size),
            fieldName: fieldName,
            dealId: dealId
        });
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        const validation = this.validateFile(file);
        if (!validation.valid) {
            this.showNotification(validation.message, 'error');
            input.value = '';
            return;
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>100MB)
        if (file.size > 100 * 1024 * 1024) {
            const confirmed = await this.confirmLargeFileUpload(file);
            if (!confirmed) {
                input.value = '';
                return;
            }
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        this.startUpload(file, dealId, fieldName);
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
     */
    validateFile(file) {
        if (!file) {
            return { valid: false, message: '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω' };
        }
        
        if (file.size > this.settings.maxFileSize) {
            return { 
                valid: false, 
                message: `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${this.formatBytes(this.settings.maxFileSize)}` 
            };
        }
        
        if (file.size === 0) {
            return { valid: false, message: '–§–∞–π–ª –ø—É—Å—Ç–æ–π' };
        }
        
        return { valid: true };
    }
    
    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞
     */
    async confirmLargeFileUpload(file) {
        return new Promise((resolve) => {
            const modal = $(`
                <div class="modal fade" id="confirmLargeUploadModal" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="alert alert-info">
                                    <h6>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:</h6>
                                    <ul class="mb-2">
                                        <li><strong>–ò–º—è:</strong> ${file.name}</li>
                                        <li><strong>–†–∞–∑–º–µ—Ä:</strong> ${this.formatBytes(file.size)}</li>
                                    </ul>
                                    <p class="mb-0">
                                        <i class="fas fa-info-circle"></i> 
                                        –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. 
                                        –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏.
                                    </p>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                    ‚ùå –û—Ç–º–µ–Ω–∞
                                </button>
                                <button type="button" class="btn btn-primary confirm-upload">
                                    üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `);
            
            $('body').append(modal);
            modal.modal('show');
            
            modal.find('.confirm-upload').on('click', () => {
                modal.modal('hide');
                resolve(true);
            });
            
            modal.on('hidden.bs.modal', () => {
                modal.remove();
                resolve(false);
            });
        });
    }
    
    /**
     * –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
     */
    async startUpload(file, dealId, fieldName) {
        const uploadId = `${dealId}_${fieldName}_${Date.now()}`;
        
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞:', {
            uploadId,
            fileName: file.name,
            fileSize: this.formatBytes(file.size),
            dealId,
            fieldName
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
        this.activeUploads.set(uploadId, {
            file,
            dealId,
            fieldName,
            startTime: Date.now(),
            xhr: null
        });
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            this.showUploadProgress(fieldName);
            this.updateUploadProgress(fieldName, 0, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...');
            
            // –°–æ–∑–¥–∞–µ–º FormData
            const formData = new FormData();
            formData.append('file', file);
            formData.append('deal_id', dealId);
            formData.append('field_name', fieldName);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            const result = await this.performUpload(formData, fieldName, uploadId);
            
            if (result.success) {
                console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', result.data);
                
                this.showUploadSuccess(fieldName, result.data);
                this.showNotification(
                    `–§–∞–π–ª "${result.data.original_name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (${result.data.upload_time}—Å)`,
                    'success'
                );
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
                if (result.deal && window.updateAllYandexFileLinks) {
                    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏');
                    window.updateAllYandexFileLinks(result.deal);
                }
            } else {
                throw new Error(result.error);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
            this.showUploadError(fieldName, error.message);
            this.showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, 'error');
        } finally {
            // –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
            this.activeUploads.delete(uploadId);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                this.hideUploadProgress(fieldName);
            }, 3000);
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
     */
    performUpload(formData, fieldName, uploadId) {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ XHR –¥–ª—è –æ—Ç–º–µ–Ω—ã
            const uploadInfo = this.activeUploads.get(uploadId);
            if (uploadInfo) {
                uploadInfo.xhr = xhr;
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ XHR
            xhr.timeout = this.settings.timeout;
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            xhr.upload.addEventListener('progress', (e) => {
                if (e.lengthComputable) {
                    const percent = Math.round((e.loaded / e.total) * 100);
                    const elapsed = (Date.now() - uploadInfo?.startTime) / 1000;
                    const speed = e.loaded / elapsed;
                    const remaining = (e.total - e.loaded) / speed;
                    
                    const statusText = `${percent}% ‚Ä¢ ${this.formatBytes(speed)}/—Å ‚Ä¢ ${this.formatTime(remaining)} –æ—Å—Ç–∞–ª–æ—Å—å`;
                    
                    this.updateUploadProgress(fieldName, percent, statusText);
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            xhr.upload.addEventListener('loadstart', () => {
                console.log('üì§ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
                this.updateUploadProgress(fieldName, 0, '–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏...');
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            xhr.addEventListener('load', () => {
                try {
                    const response = JSON.parse(xhr.responseText);
                    if (xhr.status >= 200 && xhr.status < 300) {
                        resolve(response);
                    } else {
                        reject(new Error(response.error || `HTTP ${xhr.status}`));
                    }
                } catch (error) {
                    reject(new Error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞'));
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
            xhr.addEventListener('error', () => {
                reject(new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞'));
            });
            
            xhr.addEventListener('timeout', () => {
                reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏'));
            });
            
            xhr.addEventListener('abort', () => {
                reject(new Error('–ó–∞–≥—Ä—É–∑–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'));
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            xhr.open('POST', this.apiEndpoints.upload, true);
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            
            // CSRF —Ç–æ–∫–µ–Ω
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            if (csrfToken) {
                xhr.setRequestHeader('X-CSRF-TOKEN', csrfToken);
            }
            
            xhr.send(formData);
        });
    }
    
    /**
     * –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    cancelUpload(fieldName) {
        console.log('‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–ª—è:', fieldName);
        
        // –ù–∞–π–¥–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
        for (const [uploadId, uploadInfo] of this.activeUploads.entries()) {
            if (uploadInfo.fieldName === fieldName && uploadInfo.xhr) {
                uploadInfo.xhr.abort();
                this.activeUploads.delete(uploadId);
                break;
            }
        }
        
        this.hideUploadProgress(fieldName);
        this.showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', 'info');
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
     */
    async confirmAndDeleteFile(dealId, fieldName) {
        const confirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞?');
        if (!confirmed) return;
        
        try {
            console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:', { dealId, fieldName });
            
            const response = await fetch(this.apiEndpoints.delete, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                },
                body: JSON.stringify({
                    deal_id: dealId,
                    field_name: fieldName
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showFileDeleted(fieldName);
                this.showNotification('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
                console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω:', { dealId, fieldName });
            } else {
                throw new Error(result.error);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            this.showNotification(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`, 'error');
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showUploadProgress(fieldName) {
        $(`#upload-status-${fieldName}`).show();
        $(`#file-success-${fieldName}`).hide();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    updateUploadProgress(fieldName, percent, statusText) {
        const $container = $(`#upload-status-${fieldName}`);
        
        $container.find('.progress-bar').css('width', `${percent}%`);
        $container.find('.upload-text').text(statusText);
    }
    
    /**
     * –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideUploadProgress(fieldName) {
        $(`#upload-status-${fieldName}`).hide();
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showUploadSuccess(fieldName, data) {
        this.hideUploadProgress(fieldName);
        
        console.log('‚úÖ YandexDiskUploaderV3.showUploadSuccess:', { fieldName, data });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
        if (window.updateYandexFileLink) {
            window.updateYandexFileLink(fieldName, data.yandex_disk_url, data.original_name);
        } else {
            // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ, –µ—Å–ª–∏ –Ω–æ–≤–∞—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            console.warn('‚ö†Ô∏è –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            const $success = $(`#file-success-${fieldName}`);
            if ($success.length > 0) {
                $success.find('.file-name').text(data.original_name);
                $success.find('.file-link').attr('href', data.yandex_disk_url);
                $success.show();
                $success.addClass('animate__animated animate__fadeIn');
            }
        }
        
        // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º
        $(document).trigger('yandexFileUploaded', {
            fieldName: fieldName,
            data: data
        });
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showUploadError(fieldName, errorMessage) {
        this.hideUploadProgress(fieldName);
        
        const $container = $(`input[name="${fieldName}"]`).closest('.form-group-deal');
        $container.find('.upload-status').html(`
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle"></i>
                –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${errorMessage}
            </div>
        `).show();
        
        // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            $container.find('.upload-status').hide();
        }, 5000);
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
     */
    showFileDeleted(fieldName) {
        $(`#file-success-${fieldName}`).hide();
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ñ–∞–π–ª–∞
        $(`input[name="${fieldName}"]`).val('');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–∞
     */
    async updateFileStatus(fieldName) {
        const dealId = this.extractDealId();
        if (!dealId) return;
        
        try {
            const response = await fetch(`${this.apiEndpoints.info}?deal_id=${dealId}&field_name=${fieldName}`);
            const result = await response.json();
            
            if (result.success && result.data) {
                this.showUploadSuccess(fieldName, result.data);
            }
        } catch (error) {
            console.debug('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error.message);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async checkServiceHealth() {
        try {
            const response = await fetch(this.apiEndpoints.health);
            const result = await response.json();
            
            if (result.success) {
                console.log('üíö –°–µ—Ä–≤–∏—Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:', result.yandex_disk);
            } else {
                console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞:', result.error);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞:', error);
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—è
     */
    extractFieldName(input) {
        return $(input).attr('name') || '';
    }
    
    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Å–¥–µ–ª–∫–∏
     */
    extractDealId() {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ID —Å–¥–µ–ª–∫–∏ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        const dealIdInput = $('input[name="deal_id"]');
        if (dealIdInput.length > 0) {
            return dealIdInput.val();
        }
        
        // –ò–∑ URL
        const urlMatch = window.location.href.match(/deal[s]?\/(\d+)/);
        if (urlMatch) {
            return urlMatch[1];
        }
        
        // –ò–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞ —Ñ–æ—Ä–º—ã
        const form = $('#update-deal-form, #edit-deal-form');
        if (form.length > 0) {
            return form.data('deal-id');
        }
        
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–¥–µ–ª–∫–∏');
        return null;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
     */
    formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    formatTime(seconds) {
        if (!seconds || seconds < 0) return '‚àû';
        
        if (seconds < 60) return `${Math.round(seconds)}—Å`;
        if (seconds < 3600) return `${Math.round(seconds / 60)}–º`;
        return `${Math.round(seconds / 3600)}—á`;
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!$('.notification-container').length) {
            $('body').append('<div class="notification-container" style="position: fixed; top: 20px; right: 20px; z-index: 9999;"></div>');
        }
        
        const typeClasses = {
            success: 'alert-success',
            error: 'alert-danger',
            warning: 'alert-warning',
            info: 'alert-info'
        };
        
        const notification = $(`
            <div class="alert ${typeClasses[type]} alert-dismissible fade show animate__animated animate__fadeInRight" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `);
        
        $('.notification-container').append(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.addClass('animate__fadeOutRight');
            setTimeout(() => notification.remove(), 500);
        }, 5000);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.YandexDiskUploaderV3 = YandexDiskUploaderV3;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
$(document).ready(function() {
    if (typeof window.yandexDiskUploaderV3 === 'undefined') {
        window.yandexDiskUploaderV3 = new YandexDiskUploaderV3();
        console.log('üéØ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä YandexDiskUploaderV3 —Å–æ–∑–¥–∞–Ω');
    }
});

// –†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
$(document).on('shown.bs.modal', '#editModal', function() {
    if (window.yandexDiskUploaderV3 && window.yandexDiskUploaderV3.isInitialized) {
        window.yandexDiskUploaderV3.initializeExistingFields();
        console.log('üîÑ YandexDiskUploaderV3 –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
    }
});

console.log('üì¶ YandexDiskUploaderV3 –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
